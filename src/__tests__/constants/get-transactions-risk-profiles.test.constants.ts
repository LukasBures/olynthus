import BigNumber from 'bignumber.js';

/* eslint-disable max-len */
export namespace GetTransactionRiskProfilesTestConstants {
  export const API_ROUTE_NAME = '/api/v1/chains/ETHEREUM/transactions/risk-profiles';

  export const ETHERSCAN_RESPONSES = {
    '0x000000000000000000000000000000000000dead': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode: '',
            ABI: 'Contract source code not verified',
            ContractName: 'Burn Address',
            CompilerVersion: '',
            OptimizationUsed: '',
            Runs: '',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'Unknown',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: {
        status: '0',
        message: 'NOTOK',
        result: 'Token info not found',
      },
    },
    '0xdc24316b9ae028f1497c275eb9192a3ea0f67023': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              '# @version 0.2.8\r\n"""\r\n@title Curve ETH/stETH StableSwap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020 - all rights reserved\r\n"""\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface CurveToken:\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\n\r\n# Events\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent TokenExchangeUnderlying:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\nevent CommitNewFee:\r\n    deadline: indexed(uint256)\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent NewFee:\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\n# These constants must be set prior to compiling\r\nN_COINS: constant(int128) = 2\r\n\r\n# fixed constants\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\n\r\nMAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\n\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\nA_PRECISION: constant(uint256) = 100\r\n\r\nADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\ncoins: public(address[N_COINS])\r\nadmin_balances: public(uint256[N_COINS])\r\n\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\n\r\nowner: public(address)\r\nlp_token: public(address)\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nadmin_actions_deadline: public(uint256)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _owner: address,\r\n    _coins: address[N_COINS],\r\n    _pool_token: address,\r\n    _A: uint256,\r\n    _fee: uint256,\r\n    _admin_fee: uint256\r\n):\r\n    """\r\n    @notice Contract constructor\r\n    @param _owner Contract owner address\r\n    @param _coins Addresses of ERC20 conracts of coins\r\n    @param _pool_token Address of the token representing LP share\r\n    @param _A Amplification coefficient multiplied by n * (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    @param _admin_fee Admin fee\r\n    """\r\n    assert _coins[0] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    assert _coins[1] != ZERO_ADDRESS\r\n\r\n    self.coins = _coins\r\n    self.initial_A = _A * A_PRECISION\r\n    self.future_A = _A * A_PRECISION\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n    self.owner = _owner\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n    self.lp_token = _pool_token\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        # handle ramping up and down of A\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus "if"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@view\r\n@internal\r\ndef _balances(_value: uint256 = 0) -> uint256[N_COINS]:\r\n    return [\r\n        self.balance - self.admin_balances[0] - _value,\r\n        ERC20(self.coins[1]).balanceOf(self) - self.admin_balances[1]\r\n    ]\r\n\r\n\r\n@view\r\n@external\r\ndef balances(i: uint256) -> uint256:\r\n    """\r\n    @notice Get the current balance of a coin within the\r\n            pool, less the accrued admin fees\r\n    @param i Index value for the coin to query balance of\r\n    @return Token balance\r\n    """\r\n    return self._balances()[i]\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\r\n    """\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    """\r\n    S: uint256 = 0\r\n    Dprev: uint256 = 0\r\n\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS + 1)  # +1 is to prevent /0\r\n        Dprev = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    """\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    """\r\n    D: uint256 = self.get_D(self._balances(), self._A())\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    token_supply: uint256 = ERC20(self.lp_token).totalSupply()\r\n    return D * PRECISION / token_supply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256:\r\n    """\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param amounts Amount of each coin being deposited\r\n    @param is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    """\r\n    amp: uint256 = self._A()\r\n    balances: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(balances, amp)\r\n    for i in range(N_COINS):\r\n        if is_deposit:\r\n            balances[i] += amounts[i]\r\n        else:\r\n            balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D(balances, amp)\r\n    token_amount: uint256 = ERC20(self.lp_token).totalSupply()\r\n    diff: uint256 = 0\r\n    if is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256) -> uint256:\r\n    """\r\n    @notice Deposit coins into the pool\r\n    @param amounts List of amounts of coins to deposit\r\n    @param min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @return Amount of LP tokens received by depositing\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # Initial invariant\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances(msg.value)\r\n    D0: uint256 = self.get_D(old_balances, amp)\r\n\r\n    lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        if token_supply == 0:\r\n            assert amounts[i] > 0  # dev: initial deposit requires all coins\r\n        new_balances[i] += amounts[i]\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D(new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user\'s share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n    D2: uint256 = 0\r\n    if token_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        admin_fee: uint256 = self.admin_fee\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            if ideal_balance > new_balances[i]:\r\n                difference = ideal_balance - new_balances[i]\r\n            else:\r\n                difference = new_balances[i] - ideal_balance\r\n            fees[i] = fee * difference / FEE_DENOMINATOR\r\n            if admin_fee != 0:\r\n                self.admin_balances[i] += fees[i] * admin_fee / FEE_DENOMINATOR\r\n            new_balances[i] -= fees[i]\r\n        D2 = self.get_D(new_balances, amp)\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n    else:\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= min_mint_amount, "Slippage screwed you"\r\n\r\n    # Take coins from the sender\r\n    assert msg.value == amounts[0]\r\n    if amounts[1] > 0:\r\n        assert ERC20(self.coins[1]).transferFrom(msg.sender, self, amounts[1])\r\n\r\n    # Mint pool tokens\r\n    CurveToken(lp_token).mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp: uint256[N_COINS]) -> uint256:\r\n    """\r\n    Calculate x[j] if one makes x[i] = x\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum\' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod\' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    """\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp, amp)\r\n    Ann: uint256 = amp * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = self._balances()\r\n    x: uint256 = xp[i] + dx\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - fee\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\r\n    """\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @param min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n    # dx and dy are in aTokens\r\n\r\n    xp: uint256[N_COINS] = self._balances(msg.value)\r\n\r\n    x: uint256 = xp[i] + dx\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = dy - dy_fee\r\n    assert dy >= min_dy, "Exchange resulted in fewer coins than expected"\r\n\r\n    admin_fee: uint256 = self.admin_fee\r\n    if admin_fee != 0:\r\n        dy_admin_fee: uint256 = dy_fee * admin_fee / FEE_DENOMINATOR\r\n        if dy_admin_fee != 0:\r\n            self.admin_balances[j] += dy_admin_fee\r\n\r\n    coin: address = self.coins[1]\r\n    if i == 0:\r\n        assert msg.value == dx\r\n        assert ERC20(coin).transfer(msg.sender, dy)\r\n    else:\r\n        assert msg.value == 0\r\n        assert ERC20(coin).transferFrom(msg.sender, self, dx)\r\n        raw_call(msg.sender, b"", value=dy)\r\n\r\n    log TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity(\r\n    _amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n) -> uint256[N_COINS]:\r\n    """\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @return List of amounts of coins that were withdrawn\r\n    """\r\n    amounts: uint256[N_COINS] = self._balances()\r\n    lp_token: address = self.lp_token\r\n    total_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    CurveToken(lp_token).burnFrom(msg.sender, _amount)  # dev: insufficient funds\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = amounts[i] * _amount / total_supply\r\n        assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"\r\n\r\n        amounts[i] = value\r\n        if i == 0:\r\n            raw_call(msg.sender, b"", value=value)\r\n        else:\r\n            assert ERC20(self.coins[1]).transfer(msg.sender, value)\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply - _amount)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256\r\n) -> uint256:\r\n    """\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        new_balances[i] -= _amounts[i]\r\n    D1: uint256 = self.get_D(new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    admin_fee: uint256 = self.admin_fee\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        new_balance: uint256 = new_balances[i]\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        fees[i] = fee * difference / FEE_DENOMINATOR\r\n        if admin_fee != 0:\r\n            self.admin_balances[i] += fees[i] * admin_fee / FEE_DENOMINATOR\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D(new_balances, amp)\r\n\r\n    lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n\r\n    assert token_amount != 0  # dev: zero tokens burned\r\n    assert token_amount <= _max_burn_amount, "Slippage screwed you"\r\n\r\n    CurveToken(lp_token).burnFrom(msg.sender, token_amount)  # dev: insufficient funds\r\n\r\n    if _amounts[0] != 0:\r\n        raw_call(msg.sender, b"", value=_amounts[0])\r\n    if _amounts[1] != 0:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, _amounts[1])\r\n\r\n    log RemoveLiquidityImbalance(msg.sender, _amounts, fees, D1, token_supply - token_amount)\r\n\r\n    return token_amount\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    """\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum\' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod\' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    """\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0       # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    Ann: uint256 = A_ * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> (uint256, uint256):\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    xp: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(xp, amp)\r\n    total_supply: uint256 = ERC20(self.lp_token).totalSupply()\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    xp_reduced: uint256[N_COINS] = xp\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        if j == i:\r\n            dx_expected = xp[j] * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp[j] - xp[j] * D1 / D0\r\n        xp_reduced[j] -= fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n\r\n    dy -= 1  # Withdraw less to account for rounding errors\r\n    dy_0: uint256 = xp[i] - new_y  # w/o fees\r\n\r\n    return dy, dy_0 - dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256:\r\n    """\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @dev Result is the same for underlying or wrapped asset withdrawals\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    """\r\n    return self._calc_withdraw_one_coin(_token_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity_one_coin(\r\n    _token_amount: uint256,\r\n    i: int128,\r\n    _min_amount: uint256\r\n) -> uint256:\r\n    """\r\n    @notice Withdraw a single coin from the pool\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_amount Minimum amount of coin to receive\r\n    @return Amount of coin received\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256 = 0\r\n    dy_fee: uint256 = 0\r\n    dy, dy_fee = self._calc_withdraw_one_coin(_token_amount, i)\r\n\r\n    assert dy >= _min_amount, "Not enough coins removed"\r\n\r\n    self.admin_balances[i] += dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\r\n\r\n    if i == 0:\r\n        raw_call(msg.sender, b"", value=dy)\r\n    else:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, dy)\r\n\r\n    log RemoveLiquidityOne(msg.sender, _token_amount, dy)\r\n\r\n    return dy\r\n\r\n\r\n### Admin functions ###\r\n\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.admin_actions_deadline == 0  # dev: active action\r\n    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\r\n    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log CommitNewFee(_deadline, new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef apply_new_fee():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\r\n    assert self.admin_actions_deadline != 0  # dev: no active action\r\n\r\n    self.admin_actions_deadline = 0\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log NewFee(_fee, _admin_fee)\r\n\r\n\r\n@external\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.transfer_ownership_deadline == 0  # dev: active transfer\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\r\n    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log NewAdmin(_owner)\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef withdraw_admin_fees():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    amount: uint256 = self.admin_balances[0]\r\n    if amount != 0:\r\n        raw_call(msg.sender, b"", value=amount)\r\n\r\n    amount = self.admin_balances[1]\r\n    if amount != 0:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, amount)\r\n\r\n    self.admin_balances = empty(uint256[N_COINS])\r\n\r\n\r\n@external\r\ndef donate_admin_fees():\r\n    """\r\n    Just in case admin balances somehow become higher than total (rounding error?)\r\n    this can be used to fix the state, too\r\n    """\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.admin_balances = empty(uint256[N_COINS])\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.is_killed = False',
            ABI: '[{"name":"TokenExchange","inputs":[{"type":"address","name":"buyer","indexed":true},{"type":"int128","name":"sold_id","indexed":false},{"type":"uint256","name":"tokens_sold","indexed":false},{"type":"int128","name":"bought_id","indexed":false},{"type":"uint256","name":"tokens_bought","indexed":false}],"anonymous":false,"type":"event"},{"name":"TokenExchangeUnderlying","inputs":[{"type":"address","name":"buyer","indexed":true},{"type":"int128","name":"sold_id","indexed":false},{"type":"uint256","name":"tokens_sold","indexed":false},{"type":"int128","name":"bought_id","indexed":false},{"type":"uint256","name":"tokens_bought","indexed":false}],"anonymous":false,"type":"event"},{"name":"AddLiquidity","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"invariant","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidity","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidityOne","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256","name":"token_amount","indexed":false},{"type":"uint256","name":"coin_amount","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidityImbalance","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"invariant","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"CommitNewAdmin","inputs":[{"type":"uint256","name":"deadline","indexed":true},{"type":"address","name":"admin","indexed":true}],"anonymous":false,"type":"event"},{"name":"NewAdmin","inputs":[{"type":"address","name":"admin","indexed":true}],"anonymous":false,"type":"event"},{"name":"CommitNewFee","inputs":[{"type":"uint256","name":"deadline","indexed":true},{"type":"uint256","name":"fee","indexed":false},{"type":"uint256","name":"admin_fee","indexed":false}],"anonymous":false,"type":"event"},{"name":"NewFee","inputs":[{"type":"uint256","name":"fee","indexed":false},{"type":"uint256","name":"admin_fee","indexed":false}],"anonymous":false,"type":"event"},{"name":"RampA","inputs":[{"type":"uint256","name":"old_A","indexed":false},{"type":"uint256","name":"new_A","indexed":false},{"type":"uint256","name":"initial_time","indexed":false},{"type":"uint256","name":"future_time","indexed":false}],"anonymous":false,"type":"event"},{"name":"StopRampA","inputs":[{"type":"uint256","name":"A","indexed":false},{"type":"uint256","name":"t","indexed":false}],"anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"type":"address","name":"_owner"},{"type":"address[2]","name":"_coins"},{"type":"address","name":"_pool_token"},{"type":"uint256","name":"_A"},{"type":"uint256","name":"_fee"},{"type":"uint256","name":"_admin_fee"}],"stateMutability":"nonpayable","type":"constructor"},{"name":"A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":5289},{"name":"A_precise","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":5251},{"name":"balances","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"i"}],"stateMutability":"view","type":"function","gas":5076},{"name":"get_virtual_price","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":1114301},{"name":"calc_token_amount","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"amounts"},{"type":"bool","name":"is_deposit"}],"stateMutability":"view","type":"function","gas":2218181},{"name":"add_liquidity","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"amounts"},{"type":"uint256","name":"min_mint_amount"}],"stateMutability":"payable","type":"function","gas":3484118},{"name":"get_dy","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"int128","name":"i"},{"type":"int128","name":"j"},{"type":"uint256","name":"dx"}],"stateMutability":"view","type":"function","gas":2654541},{"name":"exchange","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"int128","name":"i"},{"type":"int128","name":"j"},{"type":"uint256","name":"dx"},{"type":"uint256","name":"min_dy"}],"stateMutability":"payable","type":"function","gas":2810134},{"name":"remove_liquidity","outputs":[{"type":"uint256[2]","name":""}],"inputs":[{"type":"uint256","name":"_amount"},{"type":"uint256[2]","name":"_min_amounts"}],"stateMutability":"nonpayable","type":"function","gas":160545},{"name":"remove_liquidity_imbalance","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"_amounts"},{"type":"uint256","name":"_max_burn_amount"}],"stateMutability":"nonpayable","type":"function","gas":3519382},{"name":"calc_withdraw_one_coin","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"_token_amount"},{"type":"int128","name":"i"}],"stateMutability":"view","type":"function","gas":1435},{"name":"remove_liquidity_one_coin","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"_token_amount"},{"type":"int128","name":"i"},{"type":"uint256","name":"_min_amount"}],"stateMutability":"nonpayable","type":"function","gas":4113806},{"name":"ramp_A","outputs":[],"inputs":[{"type":"uint256","name":"_future_A"},{"type":"uint256","name":"_future_time"}],"stateMutability":"nonpayable","type":"function","gas":151834},{"name":"stop_ramp_A","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":148595},{"name":"commit_new_fee","outputs":[],"inputs":[{"type":"uint256","name":"new_fee"},{"type":"uint256","name":"new_admin_fee"}],"stateMutability":"nonpayable","type":"function","gas":110431},{"name":"apply_new_fee","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":153115},{"name":"revert_new_parameters","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":21865},{"name":"commit_transfer_ownership","outputs":[],"inputs":[{"type":"address","name":"_owner"}],"stateMutability":"nonpayable","type":"function","gas":74603},{"name":"apply_transfer_ownership","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":116583},{"name":"revert_transfer_ownership","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":21955},{"name":"withdraw_admin_fees","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":137597},{"name":"donate_admin_fees","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":42144},{"name":"kill_me","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":37938},{"name":"unkill_me","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":22075},{"name":"coins","outputs":[{"type":"address","name":""}],"inputs":[{"type":"uint256","name":"arg0"}],"stateMutability":"view","type":"function","gas":2160},{"name":"admin_balances","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"arg0"}],"stateMutability":"view","type":"function","gas":2190},{"name":"fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2111},{"name":"admin_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2141},{"name":"owner","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2171},{"name":"lp_token","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2201},{"name":"initial_A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2231},{"name":"future_A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2261},{"name":"initial_A_time","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2291},{"name":"future_A_time","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2321},{"name":"admin_actions_deadline","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2351},{"name":"transfer_ownership_deadline","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2381},{"name":"future_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2411},{"name":"future_admin_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2441},{"name":"future_owner","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2471}]',
            ContractName: 'Vyper_contract',
            CompilerVersion: 'vyper:0.2.8',
            OptimizationUsed: '0',
            Runs: '0',
            ConstructorArguments:
              '000000000000000000000000ecb456ea5365865ebab8a2661b0c503410e9b347000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000020dc62d5904633cc6a5e34bec87a048e80c92e97000000000000000000000000c6c09bc399f6e636a2015f3f7abf2c65d053bc5a000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000012a05f200',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'None',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: 'Token info not found' },
    },
    '0xdc24316b9ae028f1497c275eb9192a3ea0f67022': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              '# @version 0.2.8\r\n"""\r\n@title Curve ETH/stETH StableSwap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020 - all rights reserved\r\n"""\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface CurveToken:\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\n\r\n# Events\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent TokenExchangeUnderlying:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\nevent CommitNewFee:\r\n    deadline: indexed(uint256)\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent NewFee:\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\n# These constants must be set prior to compiling\r\nN_COINS: constant(int128) = 2\r\n\r\n# fixed constants\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\n\r\nMAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\n\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\nA_PRECISION: constant(uint256) = 100\r\n\r\nADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\ncoins: public(address[N_COINS])\r\nadmin_balances: public(uint256[N_COINS])\r\n\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\n\r\nowner: public(address)\r\nlp_token: public(address)\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nadmin_actions_deadline: public(uint256)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _owner: address,\r\n    _coins: address[N_COINS],\r\n    _pool_token: address,\r\n    _A: uint256,\r\n    _fee: uint256,\r\n    _admin_fee: uint256\r\n):\r\n    """\r\n    @notice Contract constructor\r\n    @param _owner Contract owner address\r\n    @param _coins Addresses of ERC20 conracts of coins\r\n    @param _pool_token Address of the token representing LP share\r\n    @param _A Amplification coefficient multiplied by n * (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    @param _admin_fee Admin fee\r\n    """\r\n    assert _coins[0] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    assert _coins[1] != ZERO_ADDRESS\r\n\r\n    self.coins = _coins\r\n    self.initial_A = _A * A_PRECISION\r\n    self.future_A = _A * A_PRECISION\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n    self.owner = _owner\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n    self.lp_token = _pool_token\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        # handle ramping up and down of A\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus "if"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@view\r\n@internal\r\ndef _balances(_value: uint256 = 0) -> uint256[N_COINS]:\r\n    return [\r\n        self.balance - self.admin_balances[0] - _value,\r\n        ERC20(self.coins[1]).balanceOf(self) - self.admin_balances[1]\r\n    ]\r\n\r\n\r\n@view\r\n@external\r\ndef balances(i: uint256) -> uint256:\r\n    """\r\n    @notice Get the current balance of a coin within the\r\n            pool, less the accrued admin fees\r\n    @param i Index value for the coin to query balance of\r\n    @return Token balance\r\n    """\r\n    return self._balances()[i]\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\r\n    """\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    """\r\n    S: uint256 = 0\r\n    Dprev: uint256 = 0\r\n\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS + 1)  # +1 is to prevent /0\r\n        Dprev = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    """\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    """\r\n    D: uint256 = self.get_D(self._balances(), self._A())\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    token_supply: uint256 = ERC20(self.lp_token).totalSupply()\r\n    return D * PRECISION / token_supply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256:\r\n    """\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param amounts Amount of each coin being deposited\r\n    @param is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    """\r\n    amp: uint256 = self._A()\r\n    balances: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(balances, amp)\r\n    for i in range(N_COINS):\r\n        if is_deposit:\r\n            balances[i] += amounts[i]\r\n        else:\r\n            balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D(balances, amp)\r\n    token_amount: uint256 = ERC20(self.lp_token).totalSupply()\r\n    diff: uint256 = 0\r\n    if is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256) -> uint256:\r\n    """\r\n    @notice Deposit coins into the pool\r\n    @param amounts List of amounts of coins to deposit\r\n    @param min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @return Amount of LP tokens received by depositing\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # Initial invariant\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances(msg.value)\r\n    D0: uint256 = self.get_D(old_balances, amp)\r\n\r\n    lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        if token_supply == 0:\r\n            assert amounts[i] > 0  # dev: initial deposit requires all coins\r\n        new_balances[i] += amounts[i]\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D(new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user\'s share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n    D2: uint256 = 0\r\n    if token_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        admin_fee: uint256 = self.admin_fee\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            if ideal_balance > new_balances[i]:\r\n                difference = ideal_balance - new_balances[i]\r\n            else:\r\n                difference = new_balances[i] - ideal_balance\r\n            fees[i] = fee * difference / FEE_DENOMINATOR\r\n            if admin_fee != 0:\r\n                self.admin_balances[i] += fees[i] * admin_fee / FEE_DENOMINATOR\r\n            new_balances[i] -= fees[i]\r\n        D2 = self.get_D(new_balances, amp)\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n    else:\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= min_mint_amount, "Slippage screwed you"\r\n\r\n    # Take coins from the sender\r\n    assert msg.value == amounts[0]\r\n    if amounts[1] > 0:\r\n        assert ERC20(self.coins[1]).transferFrom(msg.sender, self, amounts[1])\r\n\r\n    # Mint pool tokens\r\n    CurveToken(lp_token).mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp: uint256[N_COINS]) -> uint256:\r\n    """\r\n    Calculate x[j] if one makes x[i] = x\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum\' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod\' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    """\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp, amp)\r\n    Ann: uint256 = amp * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = self._balances()\r\n    x: uint256 = xp[i] + dx\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - fee\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\r\n    """\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @param min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n    # dx and dy are in aTokens\r\n\r\n    xp: uint256[N_COINS] = self._balances(msg.value)\r\n\r\n    x: uint256 = xp[i] + dx\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = dy - dy_fee\r\n    assert dy >= min_dy, "Exchange resulted in fewer coins than expected"\r\n\r\n    admin_fee: uint256 = self.admin_fee\r\n    if admin_fee != 0:\r\n        dy_admin_fee: uint256 = dy_fee * admin_fee / FEE_DENOMINATOR\r\n        if dy_admin_fee != 0:\r\n            self.admin_balances[j] += dy_admin_fee\r\n\r\n    coin: address = self.coins[1]\r\n    if i == 0:\r\n        assert msg.value == dx\r\n        assert ERC20(coin).transfer(msg.sender, dy)\r\n    else:\r\n        assert msg.value == 0\r\n        assert ERC20(coin).transferFrom(msg.sender, self, dx)\r\n        raw_call(msg.sender, b"", value=dy)\r\n\r\n    log TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity(\r\n    _amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n) -> uint256[N_COINS]:\r\n    """\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @return List of amounts of coins that were withdrawn\r\n    """\r\n    amounts: uint256[N_COINS] = self._balances()\r\n    lp_token: address = self.lp_token\r\n    total_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    CurveToken(lp_token).burnFrom(msg.sender, _amount)  # dev: insufficient funds\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = amounts[i] * _amount / total_supply\r\n        assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"\r\n\r\n        amounts[i] = value\r\n        if i == 0:\r\n            raw_call(msg.sender, b"", value=value)\r\n        else:\r\n            assert ERC20(self.coins[1]).transfer(msg.sender, value)\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply - _amount)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256\r\n) -> uint256:\r\n    """\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        new_balances[i] -= _amounts[i]\r\n    D1: uint256 = self.get_D(new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    admin_fee: uint256 = self.admin_fee\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        new_balance: uint256 = new_balances[i]\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        fees[i] = fee * difference / FEE_DENOMINATOR\r\n        if admin_fee != 0:\r\n            self.admin_balances[i] += fees[i] * admin_fee / FEE_DENOMINATOR\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D(new_balances, amp)\r\n\r\n    lp_token: address = self.lp_token\r\n    token_supply: uint256 = ERC20(lp_token).totalSupply()\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n\r\n    assert token_amount != 0  # dev: zero tokens burned\r\n    assert token_amount <= _max_burn_amount, "Slippage screwed you"\r\n\r\n    CurveToken(lp_token).burnFrom(msg.sender, token_amount)  # dev: insufficient funds\r\n\r\n    if _amounts[0] != 0:\r\n        raw_call(msg.sender, b"", value=_amounts[0])\r\n    if _amounts[1] != 0:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, _amounts[1])\r\n\r\n    log RemoveLiquidityImbalance(msg.sender, _amounts, fees, D1, token_supply - token_amount)\r\n\r\n    return token_amount\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    """\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum\' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod\' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    """\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0       # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    Ann: uint256 = A_ * N_COINS\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> (uint256, uint256):\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    xp: uint256[N_COINS] = self._balances()\r\n    D0: uint256 = self.get_D(xp, amp)\r\n    total_supply: uint256 = ERC20(self.lp_token).totalSupply()\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    xp_reduced: uint256[N_COINS] = xp\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        if j == i:\r\n            dx_expected = xp[j] * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp[j] - xp[j] * D1 / D0\r\n        xp_reduced[j] -= fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n\r\n    dy -= 1  # Withdraw less to account for rounding errors\r\n    dy_0: uint256 = xp[i] - new_y  # w/o fees\r\n\r\n    return dy, dy_0 - dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256:\r\n    """\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @dev Result is the same for underlying or wrapped asset withdrawals\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    """\r\n    return self._calc_withdraw_one_coin(_token_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef remove_liquidity_one_coin(\r\n    _token_amount: uint256,\r\n    i: int128,\r\n    _min_amount: uint256\r\n) -> uint256:\r\n    """\r\n    @notice Withdraw a single coin from the pool\r\n    @param _token_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_amount Minimum amount of coin to receive\r\n    @return Amount of coin received\r\n    """\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256 = 0\r\n    dy_fee: uint256 = 0\r\n    dy, dy_fee = self._calc_withdraw_one_coin(_token_amount, i)\r\n\r\n    assert dy >= _min_amount, "Not enough coins removed"\r\n\r\n    self.admin_balances[i] += dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\r\n\r\n    if i == 0:\r\n        raw_call(msg.sender, b"", value=dy)\r\n    else:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, dy)\r\n\r\n    log RemoveLiquidityOne(msg.sender, _token_amount, dy)\r\n\r\n    return dy\r\n\r\n\r\n### Admin functions ###\r\n\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.admin_actions_deadline == 0  # dev: active action\r\n    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\r\n    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log CommitNewFee(_deadline, new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef apply_new_fee():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\r\n    assert self.admin_actions_deadline != 0  # dev: no active action\r\n\r\n    self.admin_actions_deadline = 0\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log NewFee(_fee, _admin_fee)\r\n\r\n\r\n@external\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.transfer_ownership_deadline == 0  # dev: active transfer\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\r\n    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log NewAdmin(_owner)\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@external\r\n@nonreentrant(\'lock\')\r\ndef withdraw_admin_fees():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    amount: uint256 = self.admin_balances[0]\r\n    if amount != 0:\r\n        raw_call(msg.sender, b"", value=amount)\r\n\r\n    amount = self.admin_balances[1]\r\n    if amount != 0:\r\n        assert ERC20(self.coins[1]).transfer(msg.sender, amount)\r\n\r\n    self.admin_balances = empty(uint256[N_COINS])\r\n\r\n\r\n@external\r\ndef donate_admin_fees():\r\n    """\r\n    Just in case admin balances somehow become higher than total (rounding error?)\r\n    this can be used to fix the state, too\r\n    """\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.admin_balances = empty(uint256[N_COINS])\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.is_killed = False',
            ABI: '[{"name":"TokenExchange","inputs":[{"type":"address","name":"buyer","indexed":true},{"type":"int128","name":"sold_id","indexed":false},{"type":"uint256","name":"tokens_sold","indexed":false},{"type":"int128","name":"bought_id","indexed":false},{"type":"uint256","name":"tokens_bought","indexed":false}],"anonymous":false,"type":"event"},{"name":"TokenExchangeUnderlying","inputs":[{"type":"address","name":"buyer","indexed":true},{"type":"int128","name":"sold_id","indexed":false},{"type":"uint256","name":"tokens_sold","indexed":false},{"type":"int128","name":"bought_id","indexed":false},{"type":"uint256","name":"tokens_bought","indexed":false}],"anonymous":false,"type":"event"},{"name":"AddLiquidity","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"invariant","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidity","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidityOne","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256","name":"token_amount","indexed":false},{"type":"uint256","name":"coin_amount","indexed":false}],"anonymous":false,"type":"event"},{"name":"RemoveLiquidityImbalance","inputs":[{"type":"address","name":"provider","indexed":true},{"type":"uint256[2]","name":"token_amounts","indexed":false},{"type":"uint256[2]","name":"fees","indexed":false},{"type":"uint256","name":"invariant","indexed":false},{"type":"uint256","name":"token_supply","indexed":false}],"anonymous":false,"type":"event"},{"name":"CommitNewAdmin","inputs":[{"type":"uint256","name":"deadline","indexed":true},{"type":"address","name":"admin","indexed":true}],"anonymous":false,"type":"event"},{"name":"NewAdmin","inputs":[{"type":"address","name":"admin","indexed":true}],"anonymous":false,"type":"event"},{"name":"CommitNewFee","inputs":[{"type":"uint256","name":"deadline","indexed":true},{"type":"uint256","name":"fee","indexed":false},{"type":"uint256","name":"admin_fee","indexed":false}],"anonymous":false,"type":"event"},{"name":"NewFee","inputs":[{"type":"uint256","name":"fee","indexed":false},{"type":"uint256","name":"admin_fee","indexed":false}],"anonymous":false,"type":"event"},{"name":"RampA","inputs":[{"type":"uint256","name":"old_A","indexed":false},{"type":"uint256","name":"new_A","indexed":false},{"type":"uint256","name":"initial_time","indexed":false},{"type":"uint256","name":"future_time","indexed":false}],"anonymous":false,"type":"event"},{"name":"StopRampA","inputs":[{"type":"uint256","name":"A","indexed":false},{"type":"uint256","name":"t","indexed":false}],"anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"type":"address","name":"_owner"},{"type":"address[2]","name":"_coins"},{"type":"address","name":"_pool_token"},{"type":"uint256","name":"_A"},{"type":"uint256","name":"_fee"},{"type":"uint256","name":"_admin_fee"}],"stateMutability":"nonpayable","type":"constructor"},{"name":"A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":5289},{"name":"A_precise","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":5251},{"name":"balances","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"i"}],"stateMutability":"view","type":"function","gas":5076},{"name":"get_virtual_price","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":1114301},{"name":"calc_token_amount","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"amounts"},{"type":"bool","name":"is_deposit"}],"stateMutability":"view","type":"function","gas":2218181},{"name":"add_liquidity","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"amounts"},{"type":"uint256","name":"min_mint_amount"}],"stateMutability":"payable","type":"function","gas":3484118},{"name":"get_dy","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"int128","name":"i"},{"type":"int128","name":"j"},{"type":"uint256","name":"dx"}],"stateMutability":"view","type":"function","gas":2654541},{"name":"exchange","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"int128","name":"i"},{"type":"int128","name":"j"},{"type":"uint256","name":"dx"},{"type":"uint256","name":"min_dy"}],"stateMutability":"payable","type":"function","gas":2810134},{"name":"remove_liquidity","outputs":[{"type":"uint256[2]","name":""}],"inputs":[{"type":"uint256","name":"_amount"},{"type":"uint256[2]","name":"_min_amounts"}],"stateMutability":"nonpayable","type":"function","gas":160545},{"name":"remove_liquidity_imbalance","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256[2]","name":"_amounts"},{"type":"uint256","name":"_max_burn_amount"}],"stateMutability":"nonpayable","type":"function","gas":3519382},{"name":"calc_withdraw_one_coin","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"_token_amount"},{"type":"int128","name":"i"}],"stateMutability":"view","type":"function","gas":1435},{"name":"remove_liquidity_one_coin","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"_token_amount"},{"type":"int128","name":"i"},{"type":"uint256","name":"_min_amount"}],"stateMutability":"nonpayable","type":"function","gas":4113806},{"name":"ramp_A","outputs":[],"inputs":[{"type":"uint256","name":"_future_A"},{"type":"uint256","name":"_future_time"}],"stateMutability":"nonpayable","type":"function","gas":151834},{"name":"stop_ramp_A","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":148595},{"name":"commit_new_fee","outputs":[],"inputs":[{"type":"uint256","name":"new_fee"},{"type":"uint256","name":"new_admin_fee"}],"stateMutability":"nonpayable","type":"function","gas":110431},{"name":"apply_new_fee","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":153115},{"name":"revert_new_parameters","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":21865},{"name":"commit_transfer_ownership","outputs":[],"inputs":[{"type":"address","name":"_owner"}],"stateMutability":"nonpayable","type":"function","gas":74603},{"name":"apply_transfer_ownership","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":116583},{"name":"revert_transfer_ownership","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":21955},{"name":"withdraw_admin_fees","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":137597},{"name":"donate_admin_fees","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":42144},{"name":"kill_me","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":37938},{"name":"unkill_me","outputs":[],"inputs":[],"stateMutability":"nonpayable","type":"function","gas":22075},{"name":"coins","outputs":[{"type":"address","name":""}],"inputs":[{"type":"uint256","name":"arg0"}],"stateMutability":"view","type":"function","gas":2160},{"name":"admin_balances","outputs":[{"type":"uint256","name":""}],"inputs":[{"type":"uint256","name":"arg0"}],"stateMutability":"view","type":"function","gas":2190},{"name":"fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2111},{"name":"admin_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2141},{"name":"owner","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2171},{"name":"lp_token","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2201},{"name":"initial_A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2231},{"name":"future_A","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2261},{"name":"initial_A_time","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2291},{"name":"future_A_time","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2321},{"name":"admin_actions_deadline","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2351},{"name":"transfer_ownership_deadline","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2381},{"name":"future_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2411},{"name":"future_admin_fee","outputs":[{"type":"uint256","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2441},{"name":"future_owner","outputs":[{"type":"address","name":""}],"inputs":[],"stateMutability":"view","type":"function","gas":2471}]',
            ContractName: 'Vyper_contract',
            CompilerVersion: 'vyper:0.2.8',
            OptimizationUsed: '0',
            Runs: '0',
            ConstructorArguments:
              '000000000000000000000000ecb456ea5365865ebab8a2661b0c503410e9b347000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000020dc62d5904633cc6a5e34bec87a048e80c92e97000000000000000000000000c6c09bc399f6e636a2015f3f7abf2c65d053bc5a000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000012a05f200',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'None',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: 'Token info not found' },
    },
    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              'pragma solidity ^0.4.24;\r\n\r\n// File: zos-lib/contracts/upgradeability/Proxy.sol\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn\'t return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don\'t know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of "org.zeppelinos.proxy.implementation", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _implementation Address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) public {\r\n    assert(IMPLEMENTATION_SLOT == keccak256("org.zeppelinos.proxy.implementation"));\r\n\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) private {\r\n    require(AddressUtils.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of "org.zeppelinos.proxy.admin", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Contract constructor.\r\n   * It sets the `msg.sender` as the proxy administrator.\r\n   * @param _implementation address of the initial implementation.\r\n   */\r\n  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\r\n    assert(ADMIN_SLOT == keccak256("org.zeppelinos.proxy.admin"));\r\n\r\n    _setAdmin(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external view ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external view ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be\r\n   * called, as described in\r\n   * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    require(address(this).call.value(msg.value)(data));\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n// File: contracts/FiatTokenProxy.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy \r\n* of this software and associated documentation files (the "Software"), to deal \r\n* in the Software without restriction, including without limitation the rights \r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \r\n* copies of the Software, and to permit persons to whom the Software is furnished to \r\n* do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all \r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \r\n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title FiatTokenProxy\r\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\r\n*/ \r\ncontract FiatTokenProxy is AdminUpgradeabilityProxy {\r\n    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\r\n    }\r\n}',
            ABI: '[{"constant":false,"inputs":[{"name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newImplementation","type":"address"},{"name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"implementation","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_implementation","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"previousAdmin","type":"address"},{"indexed":false,"name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}]',
            ContractName: 'FiatTokenProxy',
            CompilerVersion: 'v0.4.24+commit.e67f0147',
            OptimizationUsed: '0',
            Runs: '200',
            ConstructorArguments:
              '0000000000000000000000000882477e7895bdc5cea7cb1552ed914ab157fe56',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: '',
            Proxy: '1',
            Implementation: '0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf',
            SwarmSource: 'bzzr://a4a547cfc7202c5acaaae74d428e988bc62ad5024eb0165532d3a8f91db4ed24',
          },
        ],
      },
      tokeninfo: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
            tokenName: 'USD Coin',
            symbol: 'USDC',
            divisor: '6',
            tokenType: 'ERC20',
            totalSupply: '40223568070649550',
            blueCheckmark: 'true',
            description:
              'USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project  with Circle being the first of several forthcoming issuers.',
            website: 'https://www.centre.io/',
            email: 'usdc@centre.io',
            blog: 'https://www.centre.io/blog',
            reddit: '',
            slack: '',
            facebook: '',
            twitter: 'https://twitter.com/centre_io',
            bitcointalk: '',
            github: 'https://github.com/centrehq',
            telegram: '',
            wechat: '',
            linkedin: '',
            discord: 'https://discord.com/invite/Q7bKN5y',
            whitepaper:
              'https://f.hubspotusercontent30.net/hubfs/9304636/PDF/centre-whitepaper.pdf',
            tokenPriceUSD: '0.999095000000000000',
          },
        ],
      },
    },

    '0xdac17f958d2ee523a2206206994597c13d831ec7': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              'pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of "user permissions".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint public _totalSupply;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is Ownable, ERC20Basic {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) public balances;\r\n\r\n    // additional variables for use if transaction fees ever became necessary\r\n    uint public basisPointsRate = 0;\r\n    uint public maximumFee = 0;\r\n\r\n    /**\r\n    * @dev Fix for the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\r\n        if (fee > maximumFee) {\r\n            fee = maximumFee;\r\n        }\r\n        uint sendAmount = _value.sub(fee);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        if (fee > 0) {\r\n            balances[owner] = balances[owner].add(fee);\r\n            Transfer(msg.sender, owner, fee);\r\n        }\r\n        Transfer(msg.sender, _to, sendAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n\r\n    uint public constant MAX_UINT = 2**256 - 1;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\r\n        if (fee > maximumFee) {\r\n            fee = maximumFee;\r\n        }\r\n        if (_allowance < MAX_UINT) {\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        }\r\n        uint sendAmount = _value.sub(fee);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        if (fee > 0) {\r\n            balances[owner] = balances[owner].add(fee);\r\n            Transfer(_from, owner, fee);\r\n        }\r\n        Transfer(_from, _to, sendAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract BlackList is Ownable, BasicToken {\r\n\r\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\r\n    function getBlackListStatus(address _maker) external constant returns (bool) {\r\n        return isBlackListed[_maker];\r\n    }\r\n\r\n    function getOwner() external constant returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    mapping (address => bool) public isBlackListed;\r\n    \r\n    function addBlackList (address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint dirtyFunds = balanceOf(_blackListedUser);\r\n        balances[_blackListedUser] = 0;\r\n        _totalSupply -= dirtyFunds;\r\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n    event AddedBlackList(address _user);\r\n\r\n    event RemovedBlackList(address _user);\r\n\r\n}\r\n\r\ncontract UpgradedStandardToken is StandardToken{\r\n    // those methods are called by the legacy contract\r\n    // and they must ensure msg.sender to be the contract address\r\n    function transferByLegacy(address from, address to, uint value) public;\r\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\r\n    function approveByLegacy(address from, address spender, uint value) public;\r\n}\r\n\r\ncontract TetherToken is Pausable, StandardToken, BlackList {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    address public upgradedAddress;\r\n    bool public deprecated;\r\n\r\n    //  The contract can be initialized with a number of tokens\r\n    //  All the tokens are deposited to the owner address\r\n    //\r\n    // @param _balance Initial supply of the contract\r\n    // @param _name Token Name\r\n    // @param _symbol Token symbol\r\n    // @param _decimals Token decimals\r\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\r\n        _totalSupply = _initialSupply;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        balances[owner] = _initialSupply;\r\n        deprecated = false;\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function transfer(address _to, uint _value) public whenNotPaused {\r\n        require(!isBlackListed[msg.sender]);\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\r\n        } else {\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\r\n        require(!isBlackListed[_from]);\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\r\n        } else {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function balanceOf(address who) public constant returns (uint) {\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\r\n        } else {\r\n            return super.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\r\n        } else {\r\n            return super.approve(_spender, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        if (deprecated) {\r\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\r\n        } else {\r\n            return super.allowance(_owner, _spender);\r\n        }\r\n    }\r\n\r\n    // deprecate current contract in favour of a new one\r\n    function deprecate(address _upgradedAddress) public onlyOwner {\r\n        deprecated = true;\r\n        upgradedAddress = _upgradedAddress;\r\n        Deprecate(_upgradedAddress);\r\n    }\r\n\r\n    // deprecate current contract if favour of a new one\r\n    function totalSupply() public constant returns (uint) {\r\n        if (deprecated) {\r\n            return StandardToken(upgradedAddress).totalSupply();\r\n        } else {\r\n            return _totalSupply;\r\n        }\r\n    }\r\n\r\n    // Issue a new amount of tokens\r\n    // these tokens are deposited into the owner address\r\n    //\r\n    // @param _amount Number of tokens to be issued\r\n    function issue(uint amount) public onlyOwner {\r\n        require(_totalSupply + amount > _totalSupply);\r\n        require(balances[owner] + amount > balances[owner]);\r\n\r\n        balances[owner] += amount;\r\n        _totalSupply += amount;\r\n        Issue(amount);\r\n    }\r\n\r\n    // Redeem tokens.\r\n    // These tokens are withdrawn from the owner address\r\n    // if the balance must be enough to cover the redeem\r\n    // or the call will fail.\r\n    // @param _amount Number of tokens to be issued\r\n    function redeem(uint amount) public onlyOwner {\r\n        require(_totalSupply >= amount);\r\n        require(balances[owner] >= amount);\r\n\r\n        _totalSupply -= amount;\r\n        balances[owner] -= amount;\r\n        Redeem(amount);\r\n    }\r\n\r\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\r\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\r\n        require(newBasisPoints < 20);\r\n        require(newMaxFee < 50);\r\n\r\n        basisPointsRate = newBasisPoints;\r\n        maximumFee = newMaxFee.mul(10**decimals);\r\n\r\n        Params(basisPointsRate, maximumFee);\r\n    }\r\n\r\n    // Called when new token are issued\r\n    event Issue(uint amount);\r\n\r\n    // Called when tokens are redeemed\r\n    event Redeem(uint amount);\r\n\r\n    // Called when contract is deprecated\r\n    event Deprecate(address newAddress);\r\n\r\n    // Called if contract ever adds fees\r\n    event Params(uint feeBasisPoints, uint maxFee);\r\n}',
            ABI: '[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_upgradedAddress","type":"address"}],"name":"deprecate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"deprecated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_evilUser","type":"address"}],"name":"addBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"upgradedAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maximumFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_maker","type":"address"}],"name":"getBlackListStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newBasisPoints","type":"uint256"},{"name":"newMaxFee","type":"uint256"}],"name":"setParams","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"issue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"redeem","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"basisPointsRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isBlackListed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_clearedUser","type":"address"}],"name":"removeBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_UINT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_blackListedUser","type":"address"}],"name":"destroyBlackFunds","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialSupply","type":"uint256"},{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Issue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newAddress","type":"address"}],"name":"Deprecate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"feeBasisPoints","type":"uint256"},{"indexed":false,"name":"maxFee","type":"uint256"}],"name":"Params","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_blackListedUser","type":"address"},{"indexed":false,"name":"_balance","type":"uint256"}],"name":"DestroyedBlackFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"AddedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"RemovedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"}]',
            ContractName: 'TetherToken',
            CompilerVersion: 'v0.4.18+commit.9cf6e910',
            OptimizationUsed: '0',
            Runs: '0',
            ConstructorArguments:
              '000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a546574686572205553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045553445400000000000000000000000000000000000000000000000000000000',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: '',
            Proxy: '0',
            Implementation: '',
            SwarmSource: 'bzzr://645ee12d73db47fd78ba77fa1f824c3c8f9184061b3b10386beb4dc9236abb28',
          },
        ],
      },
      tokeninfo: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7',
            tokenName: 'Tether USD',
            symbol: 'USDT',
            divisor: '6',
            tokenType: 'ERC20',
            totalSupply: '32294334767299762',
            blueCheckmark: 'true',
            description:
              'Tether gives you the joint benefits of open blockchain technology and traditional currency by converting your cash into a stable digital currency equivalent.',
            website: 'https://tether.to/',
            email: 'support@tether.to',
            blog: 'https://tether.to/category/announcements/',
            reddit: '',
            slack: '',
            facebook: '',
            twitter: 'https://twitter.com/Tether_to',
            bitcointalk: '',
            github: '',
            telegram: '',
            wechat: '',
            linkedin: '',
            discord: '',
            whitepaper: 'https://tether.to/wp-content/uploads/2016/06/TetherWhitePaper.pdf',
            tokenPriceUSD: '1.000000000000000000',
          },
        ],
      },
    },
    '0x4b92d19c11435614cd49af1b589001b7c08cd4d5': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              '/**\r\n *Submitted for verification at BscScan.com on 2021-03-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-10-09\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn\'t return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don\'t know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\'eip1967.proxy.implementation\')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256(\'eip1967.proxy.admin\')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\r\n    super._willFallback();\r\n  }\r\n}',
            ABI: '[{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}]',
            ContractName: 'AdminUpgradeabilityProxy',
            CompilerVersion: 'v0.6.12+commit.27d51765',
            OptimizationUsed: '1',
            Runs: '200',
            ConstructorArguments:
              '000000000000000000000000947c8cb6b339799912a93a08127c01a449a979bd00000000000000000000000020dce41acca85e8222d6861aa6d23b6c941777bf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'MIT',
            Proxy: '1',
            Implementation: '0x021ea7548ee9b40d57f47706a605043b05c6c92c',
            SwarmSource: 'ipfs://401c74d3e7f766707c9c2337d22314b5f19323083d6f9ef3755e9b0bbab43a33',
          },
        ],
      },
      tokeninfo: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0x4b92d19c11435614cd49af1b589001b7c08cd4d5',
            tokenName: 'Badger WBTC yVault',
            symbol: 'byvWBTC',
            divisor: '8',
            tokenType: 'ERC20',
            totalSupply: '5666977618',
            blueCheckmark: 'false',
            description: '',
            website: '',
            email: '',
            blog: '',
            reddit: '',
            slack: '',
            facebook: '',
            twitter: '',
            bitcointalk: '',
            github: '',
            telegram: '',
            wechat: '',
            linkedin: '',
            discord: '',
            whitepaper: '',
            tokenPriceUSD: '0.000000000000000000',
          },
        ],
      },
    },
    '0x021ea7548ee9b40d57f47706a605043b05c6c92c': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              '// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: AddressUpgradeable.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            "Address: insufficient balance"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}("");\r\n        require(\r\n            success,\r\n            "Address: unable to send value, recipient may have reverted"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, "Address: low-level call failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                "Address: low-level call with value failed"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            "Address: insufficient balance for call"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), "Address: call to non-contract");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: BadgerGuestlistApi.sol\r\n\r\ninterface BadgerGuestListAPI {\r\n    function authorized(\r\n        address guest,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool);\r\n\r\n    function setGuests(address[] calldata _guests, bool[] calldata _invited)\r\n        external;\r\n}\r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\'s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\'s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: IERC20Upgradeable.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\'s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\'s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: IGac.sol\r\n\r\ninterface IGac {\r\n    function DEV_MULTISIG() external view returns (address);\r\n\r\n    function WAR_ROOM_ACL() external view returns (address);\r\n\r\n    function BLACKLISTED_ROLE() external view returns (bytes32);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function transferFromDisabled() external view returns (bool);\r\n\r\n    function isBlacklisted(address account) external view returns (bool);\r\n\r\n    function unpause() external;\r\n\r\n    function pause() external;\r\n\r\n    function enableTransferFrom() external;\r\n\r\n    function disableTransferFrom() external;\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n}\r\n// File: Initializable.sol\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can\'t have a constructor, it\'s common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || _isConstructor() || !_initialized,\r\n            "Initializable: contract is already initialized"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n// File: MathUpgradeable.sol\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n// File: RegistryApi.sol\r\n\r\ninterface RegistryAPI {\r\n    function governance() external view returns (address);\r\n\r\n    function latestVault(address token) external view returns (address);\r\n\r\n    function numVaults(address token) external view returns (uint256);\r\n\r\n    function vaults(address token, uint256 deploymentId) external view returns (address);\r\n}\r\n// File: SafeMathUpgradeable.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\'s recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\'s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, "SafeMath: addition overflow");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, "SafeMath: subtraction overflow");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\'s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\r\n        // benefit is lost if \'b\' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, "SafeMath: multiplication overflow");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, "SafeMath: division by zero");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, "SafeMath: modulo by zero");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ContextUpgradeable.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: SafeERC20Upgradeable.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            "SafeERC20: approve from non-zero to non-zero allowance"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                "SafeERC20: decreased allowance below zero"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\r\n        private\r\n    {\r\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\r\n        // we\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                "SafeERC20: low-level call failed"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                "SafeERC20: ERC20 operation did not succeed"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: VaultApi.sol\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with "default" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with "default" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function guestList() external view returns (address);\r\n\r\n    function strategies(address _strategy)\r\n        external\r\n        view\r\n        returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function setDepositLimit(uint256 limit) external;\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    function setGuestList(address guestlist) external;\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy\'s borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered "critical" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// File: BaseSimpleWrapperUpgradeable.sol\r\n\r\nabstract contract BaseSimpleWrapperUpgradeable is Initializable {\r\n    using MathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    IERC20Upgradeable public token;\r\n\r\n    // Reduce number of external calls (SLOADs stay the same)\r\n    VaultAPI[] private _cachedVaults;\r\n\r\n    RegistryAPI public registry;\r\n\r\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\r\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\r\n    // Sentinal values used to save gas on deposit/withdraw/migrate\r\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\r\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\r\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\r\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\r\n    // VaultsAPI.depositLimit is unlimited\r\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\r\n\r\n    function _BaseSimpleWrapperUpgradeable_init(\r\n        address _token,\r\n        address _registry\r\n    ) internal initializer {\r\n        token = IERC20Upgradeable(_token);\r\n        // v2.registry.ychad.eth\r\n        registry = RegistryAPI(_registry);\r\n    }\r\n\r\n    function setRegistry(address _registry) external {\r\n        require(msg.sender == registry.governance());\r\n        // In case you want to override the registry instead of re-deploying\r\n        registry = RegistryAPI(_registry);\r\n        // Make sure there\'s no change in governance\r\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\r\n        require(msg.sender == registry.governance());\r\n    }\r\n}\r\n\r\n// File: ERC20Upgradeable.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\'t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is\r\n    Initializable,\r\n    ContextUpgradeable,\r\n    IERC20Upgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name, string memory symbol)\r\n        internal\r\n        initializer\r\n    {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol)\r\n        internal\r\n        initializer\r\n    {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                "ERC20: transfer amount exceeds allowance"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                "ERC20: decreased allowance below zero"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), "ERC20: transfer from the zero address");\r\n        require(recipient != address(0), "ERC20: transfer to the zero address");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            "ERC20: transfer amount exceeds balance"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), "ERC20: mint to the zero address");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), "ERC20: burn from the zero address");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            "ERC20: burn amount exceeds balance"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), "ERC20: approve from the zero address");\r\n        require(spender != address(0), "ERC20: approve to the zero address");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: PausableUpgradeable.sol\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() virtual {\r\n        require(!_paused, "Pausable: paused");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, "Pausable: not paused");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: SimpleWrapperGatedUpgradeable.sol\r\n\r\n/**\r\n    == Access Control ==\r\n    The Affiliate is the governance of the wrapper. It has \r\n    The manager is a representative set by governance to manage moderately sensitive operations. In this case, the sole permission is unpausing the contract.\r\n    The guardian is a representative that has pausing rights (but not unpausing). This is intended to allow for a fast response in the event of an active exploit or to prevent exploit in the case of a discovered vulnerability.\r\n\r\n    More Events\r\n    Each action emits events to faciliate easier logging and monitoring\r\n */\r\ncontract SimpleWrapperGatedUpgradeable is\r\n    ERC20Upgradeable,\r\n    BaseSimpleWrapperUpgradeable,\r\n    PausableUpgradeable\r\n{\r\n    /// @notice The EIP-712 typehash for the contract\'s domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"\r\n        );\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\r\n            "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"\r\n        );\r\n\r\n    uint256 constant MAX_BPS = 10000;\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice equivalent to `governance` in Vaults\r\n    address public affiliate;\r\n\r\n    address public pendingAffiliate;\r\n\r\n    // ===== GatedUpgradeable additional parameters =====\r\n\r\n    BadgerGuestListAPI public guestList;\r\n\r\n    address public manager;\r\n\r\n    address public guardian;\r\n\r\n    uint256 public withdrawalFee;\r\n\r\n    uint256 public withdrawalMaxDeviationThreshold;\r\n\r\n    /// @dev In experimental mode, the wrapper only deposits and withdraws from a single pre-connected vault (rather than the registry). The vault cache is not set in this mode. Once disabled, cannot be re-enabled.\r\n    bool public experimentalMode;\r\n\r\n    VaultAPI public experimentalVault;\r\n\r\n    address public treasury;\r\n\r\n    IGac public constant GAC = IGac(0x9c58B0D88578cd75154Bdb7C8B013f7157bae35a); // Set in initializer because of tests is unchangeable (because contract is upgradeable)\r\n\r\n    modifier whenNotPaused() override {\r\n        require(!paused(), "Pausable: paused");\r\n        require(!GAC.paused(), "Pausable: GAC Paused");\r\n        _;\r\n    }\r\n\r\n    /// Modifiers\r\n\r\n    modifier onlyAffiliate() {\r\n        require(msg.sender == affiliate);\r\n        _;\r\n    }\r\n\r\n    function _blacklisted(address _account) internal view {\r\n        require(!GAC.isBlacklisted(_account), "blacklisted");\r\n    }\r\n\r\n    event PendingAffiliate(address affiliate);\r\n    event AcceptAffiliate(address affiliate);\r\n    event SetGuardian(address guardian);\r\n    event SetManager(address manager);\r\n    event SetExperimentalVault(address vault);\r\n    event SetTreasury(address treasury);\r\n    event UpdateGuestList(address guestList);\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n    event WithdrawalFee(address indexed recipient, uint256 amount);\r\n    event Mint(address indexed account, uint256 shares);\r\n    event Burn(address indexed account, uint256 shares);\r\n    event SetWithdrawalFee(uint256 withdrawalFee);\r\n    event SetWithdrawalMaxDeviationThreshold(\r\n        uint256 withdrawalMaxDeviationThreshold\r\n    );\r\n\r\n    function initialize(\r\n        address _token,\r\n        address _registry,\r\n        string memory name,\r\n        string memory symbol,\r\n        address _guardian,\r\n        bool _useExperimentalMode,\r\n        address _experimentalVault\r\n    ) external initializer {\r\n        _BaseSimpleWrapperUpgradeable_init(_token, _registry);\r\n        __ERC20_init(name, symbol);\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes("1")),\r\n                _getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        affiliate = msg.sender;\r\n        guardian = _guardian;\r\n        _setupDecimals(uint8(ERC20Upgradeable(address(token)).decimals()));\r\n\r\n        if (_useExperimentalMode) {\r\n            experimentalMode = true;\r\n            experimentalVault = VaultAPI(_experimentalVault);\r\n\r\n            emit SetExperimentalVault(address(experimentalVault));\r\n        }\r\n\r\n        emit AcceptAffiliate(affiliate);\r\n        emit SetGuardian(guardian);\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _fee) external onlyAffiliate {\r\n        require(_fee <= MAX_BPS, "excessive-withdrawal-fee");\r\n        withdrawalFee = _fee;\r\n        emit SetWithdrawalFee(withdrawalFee);\r\n    }\r\n\r\n    function setWithdrawalMaxDeviationThreshold(uint256 _maxDeviationThreshold)\r\n        external\r\n        onlyAffiliate\r\n    {\r\n        require(\r\n            _maxDeviationThreshold <= MAX_BPS,\r\n            "excessive-max-deviation-threshold"\r\n        );\r\n        withdrawalMaxDeviationThreshold = _maxDeviationThreshold;\r\n        emit SetWithdrawalMaxDeviationThreshold(\r\n            withdrawalMaxDeviationThreshold\r\n        );\r\n    }\r\n\r\n    function bestVault() public view returns (VaultAPI) {\r\n        return experimentalVault;\r\n    }\r\n\r\n    /// @dev Get estimated value of vault position for an account\r\n    function totalVaultBalance(address account)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return\r\n            experimentalVault\r\n                .balanceOf(account)\r\n                .mul(experimentalVault.pricePerShare())\r\n                .div(10**uint256(experimentalVault.decimals()));\r\n    }\r\n\r\n    /// @dev Forward totalAssets from underlying vault\r\n    function totalAssets() public view returns (uint256 assets) {\r\n        return experimentalVault.totalAssets();\r\n    }\r\n\r\n    function _getChainId() internal view returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n\r\n    // ===== Access Control Setters =====\r\n    function setAffiliate(address _affiliate) external onlyAffiliate {\r\n        pendingAffiliate = _affiliate;\r\n\r\n        emit PendingAffiliate(pendingAffiliate);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyAffiliate {\r\n        treasury = _treasury;\r\n\r\n        emit SetTreasury(treasury);\r\n    }\r\n\r\n    function acceptAffiliate() external {\r\n        require(msg.sender == pendingAffiliate);\r\n        affiliate = msg.sender;\r\n\r\n        emit AcceptAffiliate(affiliate);\r\n    }\r\n\r\n    function setGuardian(address _guardian) external onlyAffiliate {\r\n        guardian = _guardian;\r\n\r\n        emit SetGuardian(guardian);\r\n    }\r\n\r\n    function setManager(address _manager) external onlyAffiliate {\r\n        manager = _manager;\r\n\r\n        emit SetManager(manager);\r\n    }\r\n\r\n    function setGuestList(address _guestList) external onlyAffiliate {\r\n        guestList = BadgerGuestListAPI(_guestList);\r\n        emit UpdateGuestList(_guestList);\r\n    }\r\n\r\n    function shareValue(uint256 numShares) external view returns (uint256) {\r\n        return _shareValue(numShares);\r\n    }\r\n\r\n    function _shareValue(uint256 numShares) internal view returns (uint256) {\r\n        uint256 totalShares = totalSupply();\r\n\r\n        if (totalShares > 0) {\r\n            return\r\n                totalVaultBalance(address(this)).mul(numShares).div(\r\n                    totalShares\r\n                );\r\n        } else {\r\n            return numShares;\r\n        }\r\n    }\r\n\r\n    /// @dev Forward pricePerShare of underlying vault\r\n    function pricePerShare() public view returns (uint256) {\r\n        return VaultAPI(experimentalVault).pricePerShare();\r\n    }\r\n\r\n    function totalWrapperBalance(address account)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return\r\n            balanceOf(account).mul(pricePerShare()).div(\r\n                10**uint256(decimals())\r\n            );\r\n    }\r\n\r\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\r\n        // total wrapper assets before deposit (assumes deposit already occured)\r\n        uint256 totalWrapperAssets =\r\n            totalVaultBalance(address(this)).sub(amount);\r\n\r\n        if (totalWrapperAssets > 0) {\r\n            return totalSupply().mul(amount).div(totalWrapperAssets);\r\n        } else {\r\n            return amount;\r\n        }\r\n    }\r\n\r\n    /// @dev Deposit specified amount of token in wrapper for specified recipient\r\n    /// @dev Variant without merkleProof\r\n    function depositFor(address recipient, uint256 amount)\r\n        public\r\n        whenNotPaused\r\n        returns (uint256 deposited)\r\n    {\r\n        _blacklisted(msg.sender);\r\n        _blacklisted(recipient);\r\n\r\n        bytes32[] memory emptyProof = new bytes32[](0);\r\n        deposited = depositFor(recipient, amount, emptyProof);\r\n    }\r\n\r\n    /// @dev Deposit specified amount of token in wrapper for specified recipient\r\n    /// @dev A merkle proof can be supplied to verify inclusion in merkle guest list if this functionality is active\r\n    function depositFor(\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32[] memory merkleProof\r\n    ) public whenNotPaused returns (uint256) {\r\n        _blacklisted(msg.sender);\r\n        _blacklisted(recipient);\r\n\r\n        if (address(guestList) != address(0)) {\r\n            require(\r\n                guestList.authorized(msg.sender, amount, merkleProof),\r\n                "guest-list-authorization"\r\n            );\r\n        }\r\n\r\n        uint256 shares = _deposit(msg.sender, amount);\r\n        _mint(recipient, shares);\r\n\r\n        emit Deposit(recipient, amount);\r\n        emit Mint(recipient, shares);\r\n        return amount;\r\n    }\r\n\r\n    /// @dev Deposit entire balance of token in wrapper\r\n    /// @dev A merkle proof can be supplied to verify inclusion in merkle guest list if this functionality is active\r\n    function deposit(bytes32[] calldata merkleProof)\r\n        external\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        _blacklisted(msg.sender);\r\n\r\n        uint256 allAssets = token.balanceOf(address(msg.sender));\r\n        return deposit(allAssets, merkleProof); // Deposit everything\r\n    }\r\n\r\n    /// @dev Deposit specified amount of token in wrapper\r\n    /// @dev A merkle proof can be supplied to verify inclusion in merkle guest list if this functionality is active\r\n    function deposit(uint256 amount, bytes32[] calldata merkleProof)\r\n        public\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        _blacklisted(msg.sender);\r\n\r\n        if (address(guestList) != address(0)) {\r\n            require(\r\n                guestList.authorized(msg.sender, amount, merkleProof),\r\n                "guest-list-authorization"\r\n            );\r\n        }\r\n\r\n        uint256 shares = _deposit(msg.sender, amount);\r\n        _mint(msg.sender, shares);\r\n\r\n        emit Deposit(msg.sender, amount);\r\n        emit Mint(msg.sender, shares);\r\n        return amount;\r\n    }\r\n\r\n    /// @dev Withdraw all shares for the sender\r\n    function withdraw() external whenNotPaused returns (uint256) {\r\n        _blacklisted(msg.sender);\r\n\r\n        return withdraw(balanceOf(msg.sender));\r\n    }\r\n\r\n    function withdraw(uint256 shares)\r\n        public\r\n        whenNotPaused\r\n        returns (uint256 withdrawn)\r\n    {\r\n        _blacklisted(msg.sender);\r\n\r\n        withdrawn = _withdraw(msg.sender, shares, true, true); // `true` = withdraw from `bestVault`\r\n        _burn(msg.sender, shares);\r\n\r\n        emit Withdraw(msg.sender, withdrawn);\r\n        emit Burn(msg.sender, shares);\r\n    }\r\n\r\n    /// ERC20 Overrides\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        _blacklisted(msg.sender);\r\n        _blacklisted(recipient);\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override whenNotPaused returns (bool) {\r\n        _blacklisted(msg.sender);\r\n        _blacklisted(sender);\r\n        _blacklisted(recipient);\r\n        require(\r\n            !GAC.transferFromDisabled(),\r\n            "transferFrom: GAC transferFromDisabled"\r\n        );\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Triggers an approval from owner to spends\r\n     * @param owner The address to approve from\r\n     * @param spender The address to be approved\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @param deadline The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(owner != address(0), "permit: signature");\r\n        require(block.timestamp <= deadline, "permit: expired");\r\n\r\n        bytes32 structHash =\r\n            keccak256(\r\n                abi.encode(\r\n                    PERMIT_TYPEHASH,\r\n                    owner,\r\n                    spender,\r\n                    amount,\r\n                    nonces[owner]++,\r\n                    deadline\r\n                )\r\n            );\r\n        bytes32 digest =\r\n            keccak256(\r\n                abi.encodePacked("\\\\x19\\\\x01", DOMAIN_SEPARATOR, structHash)\r\n            );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory == owner, "permit: unauthorized");\r\n\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    // @dev Pausing is optimized for speed of action. The guardian is intended to be the option with the least friction, though manager or affiliate can pause as well.\r\n    function pause() external {\r\n        require(\r\n            msg.sender == guardian ||\r\n                msg.sender == manager ||\r\n                msg.sender == affiliate,\r\n            "only-authorized-pausers"\r\n        );\r\n        _pause();\r\n    }\r\n\r\n    // @dev Unpausing requires a higher permission level than pausing, which is optimized for speed of action. The manager or affiliate can unpause\r\n    function unpause() external {\r\n        require(\r\n            msg.sender == manager || msg.sender == affiliate,\r\n            "only-authorized-unpausers"\r\n        );\r\n        _unpause();\r\n    }\r\n\r\n    //note. sometimes when we deposit we "lose" money. Therefore our amount needs to be adjusted to reflect the true pricePerShare we received\r\n    function _deposit(address depositor, uint256 amount)\r\n        internal\r\n        returns (uint256 shares)\r\n    {\r\n        VaultAPI _bestVault = bestVault();\r\n\r\n        // NOTE: Caching avoids SLOADs\r\n        IERC20Upgradeable cachedToken = token;\r\n\r\n        cachedToken.safeTransferFrom(depositor, address(this), amount);\r\n\r\n        if (\r\n            cachedToken.allowance(address(this), address(_bestVault)) < amount\r\n        ) {\r\n            cachedToken.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\r\n            cachedToken.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\r\n        }\r\n\r\n        shares = _bestVault.deposit(amount);\r\n    }\r\n\r\n    /// @dev Variant with withdrawal fee and verification of max loss. Used in withdraw functions.\r\n    /// @dev Migrate functions use the variant from BaseWrapper without these features.\r\n    function _withdraw(\r\n        address receiver,\r\n        uint256 shares, // if `MAX_UINT256`, just withdraw everything\r\n        bool processWithdrawalFee, // If true, process withdrawal fee to affiliate\r\n        bool verifyMaxLoss // If true, ensure that the amount is within an expected range based on withdrawalMaxDeviationThreshold\r\n    ) internal virtual returns (uint256 withdrawn) {\r\n        VaultAPI _bestVault = bestVault();\r\n\r\n        // Start with the total shares that the wrapper has\r\n        uint256 availableShares = experimentalVault.balanceOf(address(this));\r\n\r\n        uint256 expected = _shareValue(shares);\r\n        withdrawn = experimentalVault.withdraw(shares);\r\n\r\n        // Invariant: withdrawn should not be signifcantly less than expected amount, defined by threshold\r\n        if (expected > withdrawn) {\r\n            _verifyWithinMaxDeviationThreshold(withdrawn, expected);\r\n        }\r\n\r\n        // Process withdrawal fee\r\n        // NOTE: Caching saves an extra SLOAD = 97 gas\r\n        address feeRecipient = treasury;\r\n        IERC20Upgradeable cachedToken = token;\r\n\r\n        if (\r\n            withdrawalFee > 0 &&\r\n            processWithdrawalFee &&\r\n            feeRecipient != address(0)\r\n        ) {\r\n            uint256 withdrawalToTreasury =\r\n                withdrawn.mul(withdrawalFee).div(MAX_BPS);\r\n            withdrawn = withdrawn.sub(withdrawalToTreasury);\r\n\r\n            cachedToken.safeTransfer(feeRecipient, withdrawalToTreasury);\r\n            emit WithdrawalFee(feeRecipient, withdrawalToTreasury);\r\n        }\r\n\r\n        // `receiver` now has `withdrawn` tokens as balance\r\n        if (receiver != address(this))\r\n            cachedToken.safeTransfer(receiver, withdrawn);\r\n    }\r\n\r\n    // Require that difference between expected and actual values is less than the deviation threshold percentage\r\n    function _verifyWithinMaxDeviationThreshold(\r\n        uint256 actual,\r\n        uint256 expected\r\n    ) internal view {\r\n        uint256 diff = _diff(expected, actual);\r\n        require(\r\n            diff <= expected.mul(withdrawalMaxDeviationThreshold).div(MAX_BPS),\r\n            "wrapper/withdraw-exceed-max-deviation-threshold"\r\n        );\r\n    }\r\n\r\n    /// @notice Utility function to diff two numbers, expects higher value in first position\r\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, "diff/expected-higher-number-in-first-position");\r\n        return a.sub(b);\r\n    }\r\n}',
            ABI: '[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"affiliate","type":"address"}],"name":"AcceptAffiliate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"affiliate","type":"address"}],"name":"PendingAffiliate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"vault","type":"address"}],"name":"SetExperimentalVault","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guardian","type":"address"}],"name":"SetGuardian","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"manager","type":"address"}],"name":"SetManager","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasury","type":"address"}],"name":"SetTreasury","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawalFee","type":"uint256"}],"name":"SetWithdrawalFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"withdrawalMaxDeviationThreshold","type":"uint256"}],"name":"SetWithdrawalMaxDeviationThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guestList","type":"address"}],"name":"UpdateGuestList","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"WithdrawalFee","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GAC","outputs":[{"internalType":"contract IGac","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptAffiliate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"affiliate","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bestVault","outputs":[{"internalType":"contract VaultAPI","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositFor","outputs":[{"internalType":"uint256","name":"deposited","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"depositFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"experimentalMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"experimentalVault","outputs":[{"internalType":"contract VaultAPI","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"guardian","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"guestList","outputs":[{"internalType":"contract BadgerGuestListAPI","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_registry","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"_guardian","type":"address"},{"internalType":"bool","name":"_useExperimentalMode","type":"bool"},{"internalType":"address","name":"_experimentalVault","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"manager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingAffiliate","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pricePerShare","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registry","outputs":[{"internalType":"contract RegistryAPI","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_affiliate","type":"address"}],"name":"setAffiliate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_guardian","type":"address"}],"name":"setGuardian","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_guestList","type":"address"}],"name":"setGuestList","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_manager","type":"address"}],"name":"setManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_registry","type":"address"}],"name":"setRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_treasury","type":"address"}],"name":"setTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"}],"name":"setWithdrawalFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxDeviationThreshold","type":"uint256"}],"name":"setWithdrawalMaxDeviationThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"numShares","type":"uint256"}],"name":"shareValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20Upgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"totalVaultBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"totalWrapperBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"withdrawn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawalMaxDeviationThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]',
            ContractName: 'SimpleWrapperGatedUpgradeable',
            CompilerVersion: 'v0.6.12+commit.27d51765',
            OptimizationUsed: '1',
            Runs: '200',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'MIT',
            Proxy: '0',
            Implementation: '',
            SwarmSource: 'ipfs://ab0f21592fc2c584caed63a3d063873c3da81421c5bc35944423c5acc981f3a0',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: 'Token info not found' },
    },
    '0x839c6ca36f51fc2dbf466e027b8a57f840dc9c57': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode: '',
            ABI: 'Contract source code not verified',
            ContractName: '',
            CompilerVersion: '',
            OptimizationUsed: '',
            Runs: '',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'Unknown',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0x839c6ca36f51fc2dbf466e027b8a57f840dc9c57',
            tokenName: 'Project Fox',
            symbol: 'FOX',
            divisor: '0',
            tokenType: 'ERC721',
            totalSupply: '0',
            blueCheckmark: 'false',
            description: '',
            website: '',
            email: '',
            blog: '',
            reddit: '',
            slack: '',
            facebook: '',
            twitter: '',
            bitcointalk: '',
            github: '',
            telegram: '',
            wechat: '',
            linkedin: '',
            discord: '',
            whitepaper: '',
            tokenPriceUSD: '0.000000000000000000',
          },
        ],
      },
    },
    '0xb2dd0dc22c7d103928650abd260935ef9ef40cfc': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode: '',
            ABI: 'Contract source code not verified',
            ContractName: '',
            CompilerVersion: '',
            OptimizationUsed: '',
            Runs: '',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'Unknown',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: 'Token info not found' },
      contractCreation: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0xb2dd0dc22c7d103928650abd260935ef9ef40cfc',
            contractCreator: '0x4f53269e422711d4725f7381444c7f66f7d05788',
            txHash: '0xe7f3389ae86e92b4446020e2a0e3d45b63bdb588cb39602a5b6d72efdd896cdb',
          },
        ],
      },
    },
    '0xc0ee9db1a9e07ca63e4ff0d5fb6f86bf68d47b89': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode: '',
            ABI: 'Contract source code not verified',
            ContractName: '',
            CompilerVersion: '',
            OptimizationUsed: '',
            Runs: '',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'Unknown',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: '' },
    },
    '0xffaef3f8a37014b932334d283f90a2408eba0328': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode: '',
            ABI: 'Contract source code not verified',
            ContractName: '',
            CompilerVersion: '',
            OptimizationUsed: '',
            Runs: '',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: 'Unknown',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: '' },
      contractCreation: {
        status: '1',
        message: 'OK',
        result: [
          {
            contractAddress: '0xffaef3f8a37014b932334d283f90a2408eba0328',
            contractCreator: '0x484f744e6aef1152cffd03177962b23de488c58d',
            txHash: '0x890a072349d780f8eabc5dadcb2a1d1bc4a7501381a1a6a81d28bbdbc2c58ed4',
          },
        ],
      },
    },
    '0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52': {
      getsourcecode: {
        status: '1',
        message: 'OK',
        result: [
          {
            SourceCode:
              '{{\r\n  "language": "Solidity",\r\n  "sources": {\r\n    "contracts/UniswapV3Pool.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport \'./interfaces/IUniswapV3Pool.sol\';\\n\\nimport \'./NoDelegateCall.sol\';\\n\\nimport \'./libraries/LowGasSafeMath.sol\';\\nimport \'./libraries/SafeCast.sol\';\\nimport \'./libraries/Tick.sol\';\\nimport \'./libraries/TickBitmap.sol\';\\nimport \'./libraries/Position.sol\';\\nimport \'./libraries/Oracle.sol\';\\n\\nimport \'./libraries/FullMath.sol\';\\nimport \'./libraries/FixedPoint128.sol\';\\nimport \'./libraries/TransferHelper.sol\';\\nimport \'./libraries/TickMath.sol\';\\nimport \'./libraries/LiquidityMath.sol\';\\nimport \'./libraries/SqrtPriceMath.sol\';\\nimport \'./libraries/SwapMath.sol\';\\n\\nimport \'./interfaces/IUniswapV3PoolDeployer.sol\';\\nimport \'./interfaces/IUniswapV3Factory.sol\';\\nimport \'./interfaces/IERC20Minimal.sol\';\\nimport \'./interfaces/callback/IUniswapV3MintCallback.sol\';\\nimport \'./interfaces/callback/IUniswapV3SwapCallback.sol\';\\nimport \'./interfaces/callback/IUniswapV3FlashCallback.sol\';\\n\\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using Oracle for Oracle.Observation[65535];\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override factory;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token0;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token1;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint24 public immutable override fee;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    int24 public immutable override tickSpacing;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint128 public immutable override maxLiquidityPerTick;\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // the most-recently updated index of the observations array\\n        uint16 observationIndex;\\n        // the current maximum number of observations that are being stored\\n        uint16 observationCardinality;\\n        // the next maximum number of observations to store, triggered in observations.write\\n        uint16 observationCardinalityNext;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    Slot0 public override slot0;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal0X128;\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n    // accumulated protocol fees in token0/token1 units\\n    struct ProtocolFees {\\n        uint128 token0;\\n        uint128 token1;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    ProtocolFees public override protocolFees;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint128 public override liquidity;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int24 => Tick.Info) public override ticks;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int16 => uint256) public override tickBitmap;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(bytes32 => Position.Info) public override positions;\\n    /// @inheritdoc IUniswapV3PoolState\\n    Oracle.Observation[65535] public override observations;\\n\\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\\n    modifier lock() {\\n        require(slot0.unlocked, \'LOK\');\\n        slot0.unlocked = false;\\n        _;\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == IUniswapV3Factory(factory).owner());\\n        _;\\n    }\\n\\n    constructor() {\\n        int24 _tickSpacing;\\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\\n        tickSpacing = _tickSpacing;\\n\\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\\n        require(tickLower < tickUpper, \'TLU\');\\n        require(tickLower >= TickMath.MIN_TICK, \'TLM\');\\n        require(tickUpper <= TickMath.MAX_TICK, \'TUM\');\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp); // truncation is desired\\n    }\\n\\n    /// @dev Get the pool\'s balance of token0\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance0() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the pool\'s balance of token1\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance1() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        )\\n    {\\n        checkTicks(tickLower, tickUpper);\\n\\n        int56 tickCumulativeLower;\\n        int56 tickCumulativeUpper;\\n        uint160 secondsPerLiquidityOutsideLowerX128;\\n        uint160 secondsPerLiquidityOutsideUpperX128;\\n        uint32 secondsOutsideLower;\\n        uint32 secondsOutsideUpper;\\n\\n        {\\n            Tick.Info storage lower = ticks[tickLower];\\n            Tick.Info storage upper = ticks[tickUpper];\\n            bool initializedLower;\\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\\n                lower.tickCumulativeOutside,\\n                lower.secondsPerLiquidityOutsideX128,\\n                lower.secondsOutside,\\n                lower.initialized\\n            );\\n            require(initializedLower);\\n\\n            bool initializedUpper;\\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\\n                upper.tickCumulativeOutside,\\n                upper.secondsPerLiquidityOutsideX128,\\n                upper.secondsOutside,\\n                upper.initialized\\n            );\\n            require(initializedUpper);\\n        }\\n\\n        Slot0 memory _slot0 = slot0;\\n\\n        if (_slot0.tick < tickLower) {\\n            return (\\n                tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\\n                secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else if (_slot0.tick < tickUpper) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    _slot0.tick,\\n                    _slot0.observationIndex,\\n                    liquidity,\\n                    _slot0.observationCardinality\\n                );\\n            return (\\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityCumulativeX128 -\\n                    secondsPerLiquidityOutsideLowerX128 -\\n                    secondsPerLiquidityOutsideUpperX128,\\n                time - secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else {\\n            return (\\n                tickCumulativeUpper - tickCumulativeLower,\\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\\n                secondsOutsideUpper - secondsOutsideLower\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\\n    {\\n        return\\n            observations.observe(\\n                _blockTimestamp(),\\n                secondsAgos,\\n                slot0.tick,\\n                slot0.observationIndex,\\n                liquidity,\\n                slot0.observationCardinality\\n            );\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\\n        external\\n        override\\n        lock\\n        noDelegateCall\\n    {\\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\\n        uint16 observationCardinalityNextNew =\\n            observations.grow(observationCardinalityNextOld, observationCardinalityNext);\\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev not locked because it initializes unlocked\\n    function initialize(uint160 sqrtPriceX96) external override {\\n        require(slot0.sqrtPriceX96 == 0, \'AI\');\\n\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n\\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\\n\\n        slot0 = Slot0({\\n            sqrtPriceX96: sqrtPriceX96,\\n            tick: tick,\\n            observationIndex: 0,\\n            observationCardinality: cardinality,\\n            observationCardinalityNext: cardinalityNext,\\n            feeProtocol: 0,\\n            unlocked: true\\n        });\\n\\n        emit Initialize(sqrtPriceX96, tick);\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @dev Effect some changes to a position\\n    /// @param params the position details and the change to the position\'s liquidity to effect\\n    /// @return position a storage pointer referencing the position with the given owner and tick range\\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\\n    function _modifyPosition(ModifyPositionParams memory params)\\n        private\\n        noDelegateCall\\n        returns (\\n            Position.Info storage position,\\n            int256 amount0,\\n            int256 amount1\\n        )\\n    {\\n        checkTicks(params.tickLower, params.tickUpper);\\n\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.tickLower,\\n            params.tickUpper,\\n            params.liquidityDelta,\\n            _slot0.tick\\n        );\\n\\n        if (params.liquidityDelta != 0) {\\n            if (_slot0.tick < params.tickLower) {\\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n                // right, when we\'ll need _more_ token0 (it\'s becoming more valuable) so user must provide it\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            } else if (_slot0.tick < params.tickUpper) {\\n                // current tick is inside the passed range\\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\\n\\n                // write an oracle entry\\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\\n                    _slot0.observationIndex,\\n                    _blockTimestamp(),\\n                    _slot0.tick,\\n                    liquidityBefore,\\n                    _slot0.observationCardinality,\\n                    _slot0.observationCardinalityNext\\n                );\\n\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    _slot0.sqrtPriceX96,\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    _slot0.sqrtPriceX96,\\n                    params.liquidityDelta\\n                );\\n\\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\\n            } else {\\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n                // left, when we\'ll need _more_ token1 (it\'s becoming more valuable) so user must provide it\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets and updates a position with the given liquidity delta\\n    /// @param owner the owner of the position\\n    /// @param tickLower the lower tick of the position\'s tick range\\n    /// @param tickUpper the upper tick of the position\'s tick range\\n    /// @param tick the current tick, passed to avoid sloads\\n    function _updatePosition(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        int24 tick\\n    ) private returns (Position.Info storage position) {\\n        position = positions.get(owner, tickLower, tickUpper);\\n\\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\\n\\n        // if we need to update the ticks, do it\\n        bool flippedLower;\\n        bool flippedUpper;\\n        if (liquidityDelta != 0) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    slot0.tick,\\n                    slot0.observationIndex,\\n                    liquidity,\\n                    slot0.observationCardinality\\n                );\\n\\n            flippedLower = ticks.update(\\n                tickLower,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                false,\\n                maxLiquidityPerTick\\n            );\\n            flippedUpper = ticks.update(\\n                tickUpper,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                true,\\n                maxLiquidityPerTick\\n            );\\n\\n            if (flippedLower) {\\n                tickBitmap.flipTick(tickLower, tickSpacing);\\n            }\\n            if (flippedUpper) {\\n                tickBitmap.flipTick(tickUpper, tickSpacing);\\n            }\\n        }\\n\\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =\\n            ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);\\n\\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\\n\\n        // clear any tick data that is no longer needed\\n        if (liquidityDelta < 0) {\\n            if (flippedLower) {\\n                ticks.clear(tickLower);\\n            }\\n            if (flippedUpper) {\\n                ticks.clear(tickUpper);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        require(amount > 0);\\n        (, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: recipient,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(amount0Int);\\n        amount1 = uint256(amount1Int);\\n\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) balance0Before = balance0();\\n        if (amount1 > 0) balance1Before = balance1();\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), \'M0\');\\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), \'M1\');\\n\\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\\n        // we don\'t need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: msg.sender,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: -int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(-amount0Int);\\n        amount1 = uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + uint128(amount0),\\n                position.tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    struct SwapCache {\\n        // the protocol fee for the input token\\n        uint8 feeProtocol;\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the timestamp of the current block\\n        uint32 blockTimestamp;\\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\\n        int56 tickCumulative;\\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether we\'ve computed and cached the above two accumulators\\n        bool computedLatestObservation;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalX128;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, \'AS\');\\n\\n        Slot0 memory slot0Start = slot0;\\n\\n        require(slot0Start.unlocked, \'LOK\');\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n            \'SPL\'\\n        );\\n\\n        slot0.unlocked = false;\\n\\n        SwapCache memory cache =\\n            SwapCache({\\n                liquidityStart: liquidity,\\n                blockTimestamp: _blockTimestamp(),\\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\\n                secondsPerLiquidityCumulativeX128: 0,\\n                tickCumulative: 0,\\n                computedLatestObservation: false\\n            });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        SwapState memory state =\\n            SwapState({\\n                amountSpecifiedRemaining: amountSpecified,\\n                amountCalculated: 0,\\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\\n                tick: slot0Start.tick,\\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\\n                protocolFee: 0,\\n                liquidity: cache.liquidityStart\\n            });\\n\\n        // continue swapping as long as we haven\'t used the entire input/output and haven\'t reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\\n                    ? sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n\\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\\n            if (cache.feeProtocol > 0) {\\n                uint256 delta = step.feeAmount / cache.feeProtocol;\\n                step.feeAmount -= delta;\\n                state.protocolFee += uint128(delta);\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0)\\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\\n                    // crosses an initialized tick\\n                    if (!cache.computedLatestObservation) {\\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                            cache.blockTimestamp,\\n                            0,\\n                            slot0Start.tick,\\n                            slot0Start.observationIndex,\\n                            cache.liquidityStart,\\n                            slot0Start.observationCardinality\\n                        );\\n                        cache.computedLatestObservation = true;\\n                    }\\n                    int128 liquidityNet =\\n                        ticks.cross(\\n                            step.tickNext,\\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\\n                            cache.secondsPerLiquidityCumulativeX128,\\n                            cache.tickCumulative,\\n                            cache.blockTimestamp\\n                        );\\n                    // if we\'re moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne) liquidityNet = -liquidityNet;\\n\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we\'re on a lower tick boundary (i.e. already transitioned ticks), and haven\'t moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        // update tick and write an oracle entry if the tick change\\n        if (state.tick != slot0Start.tick) {\\n            (uint16 observationIndex, uint16 observationCardinality) =\\n                observations.write(\\n                    slot0Start.observationIndex,\\n                    cache.blockTimestamp,\\n                    slot0Start.tick,\\n                    cache.liquidityStart,\\n                    slot0Start.observationCardinality,\\n                    slot0Start.observationCardinalityNext\\n                );\\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\\n                state.sqrtPriceX96,\\n                state.tick,\\n                observationIndex,\\n                observationCardinality\\n            );\\n        } else {\\n            // otherwise just update the price\\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\\n        }\\n\\n        // update liquidity if it changed\\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        // update fee growth global and, if necessary, protocol fees\\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\\n        if (zeroForOne) {\\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\\n        } else {\\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n        // do the transfers and collect payment\\n        if (zeroForOne) {\\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance0Before.add(uint256(amount0)) <= balance0(), \'IIA\');\\n        } else {\\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1)) <= balance1(), \'IIA\');\\n        }\\n\\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override lock noDelegateCall {\\n        uint128 _liquidity = liquidity;\\n        require(_liquidity > 0, \'L\');\\n\\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\\n        uint256 balance0Before = balance0();\\n        uint256 balance1Before = balance1();\\n\\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\\n\\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\\n\\n        uint256 balance0After = balance0();\\n        uint256 balance1After = balance1();\\n\\n        require(balance0Before.add(fee0) <= balance0After, \'F0\');\\n        require(balance1Before.add(fee1) <= balance1After, \'F1\');\\n\\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\\n        uint256 paid0 = balance0After - balance0Before;\\n        uint256 paid1 = balance1After - balance1Before;\\n\\n        if (paid0 > 0) {\\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\\n        }\\n        if (paid1 > 0) {\\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\\n        }\\n\\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\\n        require(\\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\\n        );\\n        uint8 feeProtocolOld = slot0.feeProtocol;\\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\\n    }\\n}\\n"\r\n    },\r\n    "contracts/interfaces/IUniswapV3Pool.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \'./pool/IUniswapV3PoolImmutables.sol\';\\nimport \'./pool/IUniswapV3PoolState.sol\';\\nimport \'./pool/IUniswapV3PoolDerivedState.sol\';\\nimport \'./pool/IUniswapV3PoolActions.sol\';\\nimport \'./pool/IUniswapV3PoolOwnerActions.sol\';\\nimport \'./pool/IUniswapV3PoolEvents.sol\';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n"\r\n    },\r\n    "contracts/NoDelegateCall.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won\'t change when it\'s checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/LowGasSafeMath.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/SafeCast.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/Tick.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \'./LowGasSafeMath.sol\';\\nimport \'./SafeCast.sol\';\\n\\nimport \'./TickMath.sol\';\\nimport \'./LiquidityMath.sol\';\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n        return type(uint128).max / numTicks;\\n    }\\n\\n    /// @notice Retrieves fee growth data\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @param tickCurrent The current tick\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position\'s tick boundaries\\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position\'s tick boundaries\\n    function getFeeGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickCurrent,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128\\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelow0X128;\\n        uint256 feeGrowthBelow1X128;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAbove0X128;\\n        uint256 feeGrowthAbove1X128;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\\n        }\\n\\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param tickCurrent The current tick\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\\n    /// @param time The current block timestamp cast to a uint32\\n    /// @param upper true for updating a position\'s upper tick, or false for updating a position\'s lower tick\\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int24 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time,\\n        bool upper,\\n        uint128 maxLiquidity\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross;\\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\\n\\n        require(liquidityGrossAfter <= maxLiquidity, \'LO\');\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= tickCurrent) {\\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\\n                info.tickCumulativeOutside = tickCumulative;\\n                info.secondsOutside = time;\\n            }\\n            info.initialized = true;\\n        }\\n\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        info.liquidityNet = upper\\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The destination tick of the transition\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\\n    /// @param time The current block.timestamp\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function cross(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick];\\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\\n        info.secondsOutside = time - info.secondsOutside;\\n        liquidityNet = info.liquidityNet;\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/TickBitmap.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \'./BitMath.sol\';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn\'t matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/Position.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \'./FullMath.sol\';\\nimport \'./FixedPoint128.sol\';\\nimport \'./LiquidityMath.sol\';\\n\\n/// @title Position\\n/// @notice Positions represent an owner address\' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    // info stored for each user\'s position\\n    struct Info {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners\' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user\'s position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position\'s tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position\'s tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, \'NP\'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n        uint128 tokensOwed1 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n\\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/Oracle.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\"observations\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        uint32 delta = blockTimestamp - last.blockTimestamp;\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                initialized: true\\n            });\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we\'ve already written an observation this block\\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n            cardinalityUpdated = cardinalityNext;\\n        } else {\\n            cardinalityUpdated = cardinality;\\n        }\\n\\n        indexUpdated = (index + 1) % cardinalityUpdated;\\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        require(current > 0, \'I\');\\n        // no-op if the passed next value isn\'t greater than the current next value\\n        if (next <= current) return current;\\n        // store in each slot to prevent fresh SSTOREs in swaps\\n        // this data will not be used because the initialized boolean is still false\\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n        return next;\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return bool Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        // if there hasn\'t been overflow, no need to adjust\\n        if (a <= time && b <= time) return a <= b;\\n\\n        uint256 aAdjusted = a > time ? a : a + 2**32;\\n        uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            // we\'ve landed on an uninitialized tick, keep searching higher (more recently)\\n            if (!beforeOrAt.initialized) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n            // check if we\'ve found the answer!\\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n            if (!targetAtOrAfter) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        // optimistically set before to the newest observation\\n        beforeOrAt = self[index];\\n\\n        // if the target is chronologically at or after the newest observation, we can early return\\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                // if newest observation equals target, we\'re in the same block, so we can ignore atOrAfter\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                // otherwise, we need to transform\\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n            }\\n        }\\n\\n        // now, set before to the oldest observation\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n        // ensure that the target is chronologically at or after the oldest observation\\n        require(lte(time, beforeOrAt.blockTimestamp, target), \'OLD\');\\n\\n        // if we\'ve reached this point, we have to binary search\\n        return binarySearch(self, time, target, index, cardinality);\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo\' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\\n            getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // we\'re at the left boundary\\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // we\'re at the right boundary\\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n        } else {\\n            // we\'re in the middle\\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n            return (\\n                beforeOrAt.tickCumulative +\\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\\n                    targetDelta,\\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                    uint160(\\n                        (uint256(\\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\\n                        ) * targetDelta) / observationTimeDelta\\n                    )\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        require(cardinality > 0, \'I\');\\n\\n        tickCumulatives = new int56[](secondsAgos.length);\\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                self,\\n                time,\\n                secondsAgos[i],\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/FullMath.sol": {\r\n      "content": "// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\"phantom overflow\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel\'s lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don\'t need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/FixedPoint128.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n"\r\n    },\r\n    "contracts/libraries/TransferHelper.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \'../interfaces/IERC20Minimal.sol\';\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \'TF\');\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/TickMath.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), \'T\');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \'R\');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/LiquidityMath.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, \'LS\');\\n        } else {\\n            require((z = x + uint128(y)) >= x, \'LA\');\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/SqrtPriceMath.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \'./LowGasSafeMath.sol\';\\nimport \'./SafeCast.sol\';\\n\\nimport \'./FullMath.sol\';\\nimport \'./UnsafeMath.sol\';\\nimport \'./FixedPoint96.sol\';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we\'re adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don\'t pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/SwapMath.sol": {\r\n      "content": "// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \'./FullMath.sol\';\\nimport \'./SqrtPriceMath.sol\';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap\'s `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn\'t reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/interfaces/IUniswapV3PoolDeployer.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\\ninterface IUniswapV3PoolDeployer {\\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\\n    /// Returns factory The factory address\\n    /// Returns token0 The first token of the pool by address sort order\\n    /// Returns token1 The second token of the pool by address sort order\\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickSpacing\\n        );\\n}\\n"\r\n    },\r\n    "contracts/interfaces/IUniswapV3Factory.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n"\r\n    },\r\n    "contracts/interfaces/IERC20Minimal.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner\'s tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n"\r\n    },\r\n    "contracts/interfaces/callback/IUniswapV3MintCallback.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n"\r\n    },\r\n    "contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n"\r\n    },\r\n    "contracts/interfaces/callback/IUniswapV3FlashCallback.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#flash\\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\\ninterface IUniswapV3FlashCallback {\\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\\n    function uniswapV3FlashCallback(\\n        uint256 fee0,\\n        uint256 fee1,\\n        bytes calldata data\\n    ) external;\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool\'s fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolState.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool\'s state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position\'s key\\n    /// @param key The position\'s key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolActions.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol\'s % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n"\r\n    },\r\n    "contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position\'s liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n"\r\n    },\r\n    "contracts/libraries/BitMath.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/UnsafeMath.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n"\r\n    },\r\n    "contracts/libraries/FixedPoint96.sol": {\r\n      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n"\r\n    }\r\n  },\r\n  "settings": {\r\n    "optimizer": {\r\n      "enabled": true,\r\n      "runs": 800\r\n    },\r\n    "metadata": {\r\n      "bytecodeHash": "none"\r\n    },\r\n    "outputSelection": {\r\n      "*": {\r\n        "*": [\r\n          "evm.bytecode",\r\n          "evm.deployedBytecode",\r\n          "abi"\r\n        ]\r\n      }\r\n    },\r\n    "libraries": {}\r\n  }\r\n}}',
            ABI: '[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]',
            ContractName: 'UniswapV3Pool',
            CompilerVersion: 'v0.7.6+commit.7338295f',
            OptimizationUsed: '1',
            Runs: '800',
            ConstructorArguments: '',
            EVMVersion: 'Default',
            Library: '',
            LicenseType: '',
            Proxy: '0',
            Implementation: '',
            SwarmSource: '',
          },
        ],
      },
      tokeninfo: { status: '0', message: 'NOTOK', result: 'Token info not found' },
    },
  };

  export const FULL_NODE_RESPONSES = {
    '0x000000000000000000000000000000000000dead': {
      eth_getCode: {
        jsonrpc: '2.0',
        id: 1,
        result: '0x',
      },
    },
    '0xdc24316b9ae028f1497c275eb9192a3ea0f67022': {
      // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
      eth_getCode: ,
    },
    '0xdc24316b9ae028f1497c275eb9192a3ea0f67023': {
      // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
      eth_getCode: 0x600436101561000d57613d71565b600035601c526000156101b6575b610140526009546101605260075461018052610160514210156101a3576006546101a0526008546101c0526101a0516101805111156100fc576101a051610180516101a0518082101561006d57600080fd5b80820390509050426101c0518082101561008657600080fd5b8082039050905080820282158284830414176100a157600080fd5b80905090509050610160516101c051808210156100bd57600080fd5b8082039050905080806100cf57600080fd5b8204905090508181830110156100e457600080fd5b8082019050905060005260005161014051565061019e565b6101a0516101a051610180518082101561011557600080fd5b80820390509050426101c0518082101561012e57600080fd5b80820390509050808202821582848304141761014957600080fd5b80905090509050610160516101c0518082101561016557600080fd5b80820390509050808061017757600080fd5b8204905090508082101561018a57600080fd5b808203905090506000526000516101405156505b6101b4565b610180516000526000516101405156505b005b63f446c1d060005114156101f45734156101cf57600080fd5b6006580161001b565b610140526101405160648082049050905060005260206000f350005b6376a2f0f0600051141561022957341561020d57600080fd5b6006580161001b565b610140526101405160005260206000f350005b600015610240575b61016052600061014052610260565b600015610258575b6101605261014052600050610260565b600015610344575b47600160c052602060c020548082101561027957600080fd5b80820390509050610140518082101561029157600080fd5b8082039050905061024052602061020060246370a0823161018052306101a05261019c6001600060c052602060c02001545afa6102cd57600080fd5b601f3d116102da57600080fd5b600050610200516001600160c052602060c0200154808210156102fc57600080fd5b80820390509050610260526040610220525b6000610220511115156103205761033c565b602061022051036102400151602061022051036102205261030e565b610160515650005b634903b0d1600051141561039157341561035d57600080fd5b60065801610231565b61014052610160526101406004356002811061038157600080fd5b602002015160005260206000f350005b6000156106b1575b6101a0526101405261016052610180526040366101c03761022060006002818352015b602061022051026101400151610200526101c08051610200518181830110156103e457600080fd5b808201905090508152505b81516001018083528114156103bc575b50506101c051151561041a5760006000526000516101a05156505b6101c05161020052610180516002808202821582848304141761043c57600080fd5b8090509050905061022052610240600060ff818352015b61020051610260526102a060006002818352015b60206102a051026101400151610280526102605161020051808202821582848304141761049357600080fd5b8090509050905061028051600280820282158284830414176104b457600080fd5b8090509050905060018181830110156104cc57600080fd5b8082019050905080806104de57600080fd5b820490509050610260525b8151600101808352811415610467575b5050610200516101e052610220516101c051808202821582848304141761051f57600080fd5b80905090509050606480820490509050610260516002808202821582848304141761054957600080fd5b8090509050905081818301101561055f57600080fd5b8082019050905061020051808202821582848304141761057e57600080fd5b809050905090506102205160648082101561059857600080fd5b808203905090506102005180820282158284830414176105b757600080fd5b8090509050905060648082049050905060036102605180820282158284830414176105e157600080fd5b809050905090508181830110156105f757600080fd5b80820190509050808061060957600080fd5b820490509050610200526101e05161020051111561065e576001610200516101e0518082101561063857600080fd5b80820390509050111515610659576102005160005250506000516101a05156505b610697565b60016101e051610200518082101561067557600080fd5b80820390509050111515610696576102005160005250506000516101a05156505b5b5b8151600101808352811415610453575b505060006000fd005b63bb7b8b8060005114156108255734156106ca57600080fd5b6101405160065801610231565b61016052610180526101405261016080516101a05280602001516101c052506101405161016051610180516101a0516101c0516006580161001b565b6101e0526101c0526101a0526101805261016052610140526101e051610200526101405161016051610180516101a0516101c0516101e051610200516101a051610220526101c05161024052610200516102605261026051610240516102205160065801610399565b6102c052610200526101e0526101c0526101a0526101805261016052610140526102c0516101405260206101e060046318160ddd6101805261019c6005545afa6107c557600080fd5b601f3d116107d257600080fd5b6000506101e0516101605261014051670de0b6b3a764000080820282158284830414176107fe57600080fd5b8090509050905061016051808061081457600080fd5b82049050905060005260206000f350005b63ed8e84f36000511415610af257341561083e57600080fd5b60443560011c1561084e57600080fd5b610140516006580161001b565b6101605261014052610160516101405261014051610160516101805160065801610231565b6101a0526101c0526101805261016052610140526101a0805161016052806020015161018052506101405161016051610180516101a051610160516101c052610180516101e0526101405161020052610200516101e0516101c05160065801610399565b610260526101a052610180526101605261014052610260516101a0526101c060006002818352015b60443515610964576101606101c0516002811061092857600080fd5b60200201805160046101c0516002811061094157600080fd5b602002013581818301101561095557600080fd5b808201905090508152506109ae565b6101606101c0516002811061097857600080fd5b60200201805160046101c0516002811061099157600080fd5b6020020135808210156109a357600080fd5b808203905090508152505b5b815160010180835281141561090c575b50506101405161016051610180516101a0516101c051610160516101e0526101805161020052610140516102205261022051610200516101e05160065801610399565b610280526101c0526101a052610180526101605261014052610280516101c052602061026060046318160ddd6102005261021c6005545afa610a4357600080fd5b601f3d11610a5057600080fd5b600050610260516101e05260006102005260443515610a8e576101c0516101a05180821015610a7e57600080fd5b8082039050905061020052610aaf565b6101a0516101c05180821015610aa357600080fd5b80820390509050610200525b610200516101e0518082028215828483041417610acb57600080fd5b809050905090506101a0518080610ae157600080fd5b82049050905060005260206000f350005b630b4c7e4d60005114156112535762ffffff5415610b0f57600080fd5b600162ffffff55600f5415610b2357600080fd5b610140516006580161001b565b61016052610140526101605161014052610140516101605161018051346101a0526101a05160065801610248565b6102005261022052610180526101605261014052610200805161016052806020015161018052506101405161016051610180516101a051610160516101c052610180516101e0526101405161020052610200516101e0516101c05160065801610399565b610260526101a052610180526101605261014052610260516101a0526005546101c052602061026060046318160ddd6102005261021c6101c0515afa610c0757600080fd5b601f3d11610c1457600080fd5b600050610260516101e0526101605161020052610180516102205261024060006002818352015b6101e0511515610c6a57600060046102405160028110610c5a57600080fd5b602002013511610c6957600080fd5b5b6102006102405160028110610c7e57600080fd5b60200201805160046102405160028110610c9757600080fd5b6020020135818183011015610cab57600080fd5b808201905090508152505b8151600101808352811415610c3b575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161020051610260526102205161028052610140516102a0526102a051610280516102605160065801610399565b610300526102405261022052610200526101e0526101c0526101a05261018052610160526101405261030051610240526101a0516102405111610d5b57600080fd5b6080366102603760006101e05111156110ae5760025460028082028215828483041417610d8757600080fd5b809050905090506004808204905090506102e0526003546103005261032060006002818352015b610240516101606103205160028110610dc657600080fd5b60200201518082028215828483041417610ddf57600080fd5b809050905090506101a0518080610df557600080fd5b820490509050610340526000610360526102006103205160028110610e1957600080fd5b6020020151610340511115610e6257610340516102006103205160028110610e4057600080fd5b602002015180821015610e5257600080fd5b8082039050905061036052610e98565b6102006103205160028110610e7657600080fd5b60200201516103405180821015610e8c57600080fd5b80820390509050610360525b6102e051610360518082028215828483041417610eb457600080fd5b809050905090506402540be400808204905090506102606103205160028110610edc57600080fd5b60200201526000610300511815610f6a576103205160028110610efe57600080fd5b600160c052602060c0200180546102606103205160028110610f1f57600080fd5b6020020151610300518082028215828483041417610f3c57600080fd5b809050905090506402540be40080820490509050818183011015610f5f57600080fd5b808201905090508155505b6102006103205160028110610f7e57600080fd5b6020020180516102606103205160028110610f9857600080fd5b602002015180821015610faa57600080fd5b808203905090508152505b8151600101808352811415610dae575b5050610140610320525b61032051516020610320510161032052610320610320511015610ff157610fcf565b61020051610340526102205161036052610140516103805261038051610360516103405160065801610399565b6103e052610300610320525b610320515260206103205103610320526101406103205110151561104d5761102a565b6103e0516102c0526101e0516102c0516101a0518082101561106e57600080fd5b80820390509050808202821582848304141761108957600080fd5b809050905090506101a051808061109f57600080fd5b8204905090506102a0526110b7565b610240516102a0525b6044356102a0511015151561110b576308c379a06102e0526020610300526014610320527f536c697070616765207363726577656420796f75000000000000000000000000610340526103205060646102fcfd5b600435341461111957600080fd5b600060243511156111815760206103a060646323b872dd6102e05233610300523061032052602435610340526102fc60006001600060c052602060c02001545af161116357600080fd5b601f3d1161117057600080fd5b6000506103a05161118057600080fd5b5b602061038060446340c10f196102e05233610300526102a051610320526102fc60006101c0515af16111b257600080fd5b601f3d116111bf57600080fd5b600050610380506004356102e052602435610300526102605161032052610280516103405261024051610360526101e0516102a05181818301101561120357600080fd5b8082019050905061038052337f26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a76860c06102e0a26102a051600052600062ffffff5560206000f350600062ffffff55005b6000156116d5575b6101e0526101405261016052610180526101a0526101c05261016051610140511861128557600080fd5b600061016051121561129657600080fd5b600261016051126112a657600080fd5b60006101405112156112b757600080fd5b600261014051126112c757600080fd5b6101405161016051610180516101a0516101c0516101e051610200516006580161001b565b61022052610200526101e0526101c0526101a05261018052610160526101405261022051610200526101405161016051610180516101a0516101c0516101e05161020051610220516101a051610240526101c05161026052610200516102805261028051610260516102405160065801610399565b6102e05261022052610200526101e0526101c0526101a0526101805261016052610140526102e0516102205261020051600280820282158284830414176113a757600080fd5b80905090509050610240526102205161026052606036610280376102e060006002818352015b610140516102e05114156113e857610180516102a05261141e565b610160516102e0511815611418576101a06102e0516002811061140a57600080fd5b60200201516102a05261141d565b61149a565b5b61028080516102a05181818301101561143657600080fd5b808201905090508152506102605161022051808202821582848304141761145c57600080fd5b809050905090506102a0516002808202821582848304141761147d57600080fd5b80905090509050808061148f57600080fd5b820490509050610260525b81516001018083528114156113cd575b5050610260516102205180820282158284830414176114c857600080fd5b80905090509050606480820282158284830414176114e557600080fd5b80905090509050610240516002808202821582848304141761150657600080fd5b80905090509050808061151857600080fd5b8204905090506102605261028051610220516064808202821582848304141761154057600080fd5b8090509050905061024051808061155657600080fd5b82049050905081818301101561156b57600080fd5b808201905090506102e0526102205161030052610320600060ff818352015b610300516102c052610300516103005180820282158284830414176115ae57600080fd5b80905090509050610260518181830110156115c857600080fd5b8082019050905060026103005180820282158284830414176115e957600080fd5b809050905090506102e05181818301101561160357600080fd5b80820190509050610220518082101561161b57600080fd5b80820390509050808061162d57600080fd5b820490509050610300526102c051610300511115611682576001610300516102c0518082101561165c57600080fd5b8082039050905011151561167d576103005160005250506000516101e05156505b6116bb565b60016102c051610300518082101561169957600080fd5b808203905090501115156116ba576103005160005250506000516101e05156505b5b5b815160010180835281141561158a575b505060006000fd005b635e0d443f60005114156118aa5734156116ee57600080fd5b600435808060008112156116fe57195b607f1c1561170b57600080fd5b9050506024358080600081121561171e57195b607f1c1561172b57600080fd5b905050610140516101605160065801610231565b610180526101a0526101605261014052610180805161014052806020015161016052506101406004356002811061177557600080fd5b602002015160443581818301101561178c57600080fd5b80820190509050610180526101405161016051610180516101a0516004356101c0526024356101e0526101805161020052610140516102205261016051610240526102405161022051610200516101e0516101c0516006580161125b565b6102a0526101a0526101805261016052610140526102a0516101a0526101406024356002811061181957600080fd5b60200201516101a0518082101561182f57600080fd5b8082039050905060018082101561184557600080fd5b808203905090506101c0526002546101c051808202821582848304141761186b57600080fd5b809050905090506402540be400808204905090506101e0526101c0516101e0518082101561189857600080fd5b8082039050905060005260206000f350005b633df021246000511415611d1d5762ffffff54156118c757600080fd5b600162ffffff55600435808060008112156118de57195b607f1c156118eb57600080fd5b905050602435808060008112156118fe57195b607f1c1561190b57600080fd5b905050600f541561191b57600080fd5b610140516101605134610180526101805160065801610248565b6101e0526102005261016052610140526101e0805161014052806020015161016052506101406004356002811061196b57600080fd5b602002015160443581818301101561198257600080fd5b80820190509050610180526101405161016051610180516101a0516004356101c0526024356101e0526101805161020052610140516102205261016051610240526102405161022051610200516101e0516101c0516006580161125b565b6102a0526101a0526101805261016052610140526102a0516101a05261014060243560028110611a0f57600080fd5b60200201516101a05180821015611a2557600080fd5b80820390509050600180821015611a3b57600080fd5b808203905090506101c0526101c0516002548082028215828483041417611a6157600080fd5b809050905090506402540be400808204905090506101e0526101c0516101e05180821015611a8e57600080fd5b808203905090506101c0526064356101c05110151515611b12576308c379a061020052602061022052602e610240527f45786368616e676520726573756c74656420696e20666577657220636f696e73610260527f207468616e2065787065637465640000000000000000000000000000000000006102805261024050608461021cfd5b600354610200526000610200511815611ba1576101e051610200518082028215828483041417611b4157600080fd5b809050905090506402540be40080820490509050610220526000610220511815611ba05760243560028110611b7557600080fd5b600160c052602060c02001805461022051818183011015611b9557600080fd5b808201905090508155505b5b6001600060c052602060c0200154610220526004351515611c1d576044353414611bca57600080fd5b60206102e0604463a9059cbb6102405233610260526101c0516102805261025c6000610220515af1611bfb57600080fd5b601f3d11611c0857600080fd5b6000506102e051611c1857600080fd5b611cbb565b3415611c2857600080fd5b602061030060646323b872dd61024052336102605230610280526044356102a05261025c6000610220515af1611c5d57600080fd5b601f3d11611c6a57600080fd5b60005061030051611c7a57600080fd5b6000610240526102408051602001806102808284600060045af1611c9d57600080fd5b505060006000610280516102a06101c051335af1611cba57600080fd5b5b6004356102405260443561026052602435610280526101c0516102a052337f8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd971406080610240a26101c051600052600062ffffff5560206000f350600062ffffff55005b635b36389c600051141561203b5762ffffff5415611d3a57600080fd5b600162ffffff553415611d4c57600080fd5b610140516101605160065801610231565b610180526101a05261016052610140526101808051610140528060200151610160525060055461018052602061022060046318160ddd6101c0526101dc610180515afa611da957600080fd5b601f3d11611db657600080fd5b600050610220516101a052602061026060446379cc67906101c052336101e052600435610200526101dc6000610180515af1611df157600080fd5b601f3d11611dfe57600080fd5b600050610260506101c060006002818352015b6101406101c05160028110611e2557600080fd5b60200201516004358082028215828483041417611e4157600080fd5b809050905090506101a0518080611e5757600080fd5b8204905090506101e05260246101c05160028110611e7457600080fd5b60200201356101e05110151515611eef576308c379a0610200526020610220526030610240527f5769746864726177616c20726573756c74656420696e20666577657220636f69610260527f6e73207468616e206578706563746564000000000000000000000000000000006102805261024050608461021cfd5b6101e0516101406101c05160028110611f0757600080fd5b60200201526101c0511515611f5b576000610200526102008051602001806102408284600060045af1611f3957600080fd5b505060006000610240516102606101e051335af1611f5657600080fd5b611fb4565b60206102a0604463a9059cbb6102005233610220526101e0516102405261021c60006001600060c052602060c02001545af1611f9657600080fd5b601f3d11611fa357600080fd5b6000506102a051611fb357600080fd5b5b5b8151600101808352811415611e11575b5050610140516101c052610160516101e052604036610200376101a05160043580821015611ff257600080fd5b8082039050905061024052337f7c363854ccf79623411f8995b362bce5eddff18c927edc6f5dbbb5e05819a82c60a06101c0a2600062ffffff556040610140f3600062ffffff55005b63e310327360005114156127605762ffffff541561205857600080fd5b600162ffffff55341561206a57600080fd5b600f541561207757600080fd5b610140516006580161001b565b6101605261014052610160516101405261014051610160516101805160065801610231565b6101a0526101c0526101805261016052610140526101a0805161016052806020015161018052506101405161016051610180516101a051610160516101c052610180516101e0526101405161020052610200516101e0516101c05160065801610399565b610260526101a052610180526101605261014052610260516101a052610160516101c052610180516101e05261020060006002818352015b6101c0610200516002811061215957600080fd5b6020020180516004610200516002811061217257600080fd5b60200201358082101561218457600080fd5b808203905090508152505b8151600101808352811415612145575b50506101405161016051610180516101a0516101c0516101e051610200516101c051610220526101e05161024052610140516102605261026051610240516102205160065801610399565b6102c052610200526101e0526101c0526101a0526101805261016052610140526102c05161020052604036610220376002546002808202821582848304141761223257600080fd5b8090509050905060048082049050905061026052600354610280526102a060006002818352015b610200516101606102a0516002811061227157600080fd5b6020020151808202821582848304141761228a57600080fd5b809050905090506101a05180806122a057600080fd5b8204905090506102c0526101c06102a051600281106122be57600080fd5b60200201516102e0526000610300526102e0516102c0511115612300576102c0516102e051808210156122f057600080fd5b8082039050905061030052612321565b6102e0516102c0518082101561231557600080fd5b80820390509050610300525b6102605161030051808202821582848304141761233d57600080fd5b809050905090506402540be400808204905090506102206102a0516002811061236557600080fd5b602002015260006102805118156123f3576102a0516002811061238757600080fd5b600160c052602060c0200180546102206102a051600281106123a857600080fd5b60200201516102805180820282158284830414176123c557600080fd5b809050905090506402540be400808204905090508181830110156123e857600080fd5b808201905090508155505b6101c06102a0516002811061240757600080fd5b6020020180516102206102a0516002811061242157600080fd5b60200201518082101561243357600080fd5b808203905090508152505b8151600101808352811415612259575b50506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516101c0516102c0526101e0516102e0526101405161030052610300516102e0516102c05160065801610399565b610360526102a05261028052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610360516102a0526005546102c052602061036060046318160ddd6103005261031c6102c0515afa61251257600080fd5b601f3d1161251f57600080fd5b600050610360516102e0526101a0516102a0518082101561253f57600080fd5b808203905090506102e051808202821582848304141761255e57600080fd5b809050905090506101a051808061257457600080fd5b820490509050610300526000610300511861258e57600080fd5b60443561030051111515156125e2576308c379a0610320526020610340526014610360527f536c697070616765207363726577656420796f750000000000000000000000006103805261036050606461033cfd5b60206103c060446379cc6790610320523361034052610300516103605261033c60006102c0515af161261357600080fd5b601f3d1161262057600080fd5b6000506103c05060006004351815612672576000610320526103208051602001806103608284600060045af161265557600080fd5b50506000600061036051610380600435335af161267157600080fd5b5b600060243518156126d55760206103c0604463a9059cbb6103205233610340526024356103605261033c60006001600060c052602060c02001545af16126b757600080fd5b601f3d116126c457600080fd5b6000506103c0516126d457600080fd5b5b600435610320526024356103405261022051610360526102405161038052610200516103a0526102e051610300518082101561271057600080fd5b808203905090506103c052337f2b5508378d7e19e0d5fa338419034731416c4f5b219a10379956f764317fd47e60c0610320a261030051600052600062ffffff5560206000f350600062ffffff55005b600015612acd575b6101e0526101405261016052610180526101a0526101c052600061016051121561279157600080fd5b600261016051126127a157600080fd5b61014051600280820282158284830414176127bb57600080fd5b80905090509050610200526101c05161022052606036610240376102a060006002818352015b610160516102a0511815612811576101806102a0516002811061280357600080fd5b602002015161026052612816565b612892565b61024080516102605181818301101561282e57600080fd5b80820190509050815250610220516101c051808202821582848304141761285457600080fd5b80905090509050610260516002808202821582848304141761287557600080fd5b80905090509050808061288757600080fd5b820490509050610220525b81516001018083528114156127e1575b5050610220516101c05180820282158284830414176128c057600080fd5b80905090509050606480820282158284830414176128dd57600080fd5b8090509050905061020051600280820282158284830414176128fe57600080fd5b80905090509050808061291057600080fd5b82049050905061022052610240516101c0516064808202821582848304141761293857600080fd5b8090509050905061020051808061294e57600080fd5b82049050905081818301101561296357600080fd5b808201905090506102a0526101c0516102c0526102e0600060ff818352015b6102c051610280526102c0516102c05180820282158284830414176129a657600080fd5b80905090509050610220518181830110156129c057600080fd5b8082019050905060026102c05180820282158284830414176129e157600080fd5b809050905090506102a0518181830110156129fb57600080fd5b808201905090506101c05180821015612a1357600080fd5b808203905090508080612a2557600080fd5b8204905090506102c052610280516102c0511115612a7a5760016102c0516102805180821015612a5457600080fd5b80820390509050111515612a75576102c05160005250506000516101e05156505b612ab3565b6001610280516102c05180821015612a9157600080fd5b80820390509050111515612ab2576102c05160005250506000516101e05156505b5b5b8151600101808352811415612982575b505060006000fd005b60001561306a575b6101805261014052610160526101405161016051610180516101a0516006580161001b565b6101c0526101a0526101805261016052610140526101c0516101a0526101405161016051610180516101a0516101c0516101e05160065801610231565b61020052610220526101e0526101c0526101a05261018052610160526101405261020080516101c05280602001516101e052506101405161016051610180516101a0516101c0516101e051610200516101c051610220526101e051610240526101a0516102605261026051610240516102205160065801610399565b6102c052610200526101e0526101c0526101a0526101805261016052610140526102c0516102005260206102a060046318160ddd6102405261025c6005545afa612bfc57600080fd5b601f3d11612c0957600080fd5b6000506102a051610220526102005161014051610200518082028215828483041417612c3457600080fd5b80905090509050610220518080612c4a57600080fd5b82049050905080821015612c5d57600080fd5b80820390509050610240526101405161016051610180516101a0516101c0516101e051610200516102205161024051610260516101a05161028052610160516102a0526101c0516102c0526101e0516102e0526102405161030052610300516102e0516102c0516102a0516102805160065801612768565b61036052610260526102405261022052610200526101e0526101c0526101a052610180526101605261014052610360516102605260025460028082028215828483041417612d2257600080fd5b80905090509050600480820490509050610280526101c0516102a0526101e0516102c0526102e060006002818352015b600061030052610160516102e0511415612dd4576101c06102e05160028110612d7a57600080fd5b6020020151610240518082028215828483041417612d9757600080fd5b80905090509050610200518080612dad57600080fd5b8204905090506102605180821015612dc457600080fd5b8082039050905061030052612e53565b6101c06102e05160028110612de857600080fd5b60200201516101c06102e05160028110612e0157600080fd5b6020020151610240518082028215828483041417612e1e57600080fd5b80905090509050610200518080612e3457600080fd5b82049050905080821015612e4757600080fd5b80820390509050610300525b6102a06102e05160028110612e6757600080fd5b60200201805161028051610300518082028215828483041417612e8957600080fd5b809050905090506402540be4008082049050905080821015612eaa57600080fd5b808203905090508152505b8151600101808352811415612d52575b50506102a06101605160028110612edb57600080fd5b6020020151610140610300525b61030051516020610300510161030052610300610300511015612f0a57612ee8565b6101a0516103205261016051610340526102a051610360526102c05161038052610240516103a0526103a0516103805161036051610340516103205160065801612768565b610400526102e0610300525b6103005152602061030051036103005261014061030051101515612f7e57612f5b565b6104005180821015612f8f57600080fd5b808203905090506102e0526102e08051600180821015612fae57600080fd5b808203905090508152506101c06101605160028110612fcc57600080fd5b60200201516102605180821015612fe257600080fd5b80820390509050610300526103208080806102e051815250506020810190508080610300516102e0518082101561301857600080fd5b808203905090508152505060409050905060c05260c051610360525b60006103605111151561304657613062565b6020610360510361032001516020610360510361036052613034565b610180515650005b63cc2b27d760005114156130f957341561308357600080fd5b6024358080600081121561309357195b607f1c156130a057600080fd5b9050506004356101405260243561016052610160516101405160065801612ad5565b6101c0526101e0526101c080808080516102005250506020810190508080805161022052505050506102005160005260206000f350005b631a4d01d260005114156133bd5762ffffff541561311657600080fd5b600162ffffff55341561312857600080fd5b6024358080600081121561313857195b607f1c1561314557600080fd5b905050600f541561315557600080fd5b604036610140376101405161016051600435610180526024356101a0526101a0516101805160065801612ad5565b61020052610220526101605261014052610200808080805161024052505060208101905080808051610260525050505061024080516101405280602001516101605250604435610140511015151561321a576308c379a06101805260206101a05260186101c0527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006101e0526101c050606461019cfd5b6024356002811061322a57600080fd5b600160c052602060c02001805461016051600354808202821582848304141761325257600080fd5b809050905090506402540be4008082049050905081818301101561327557600080fd5b80820190509050815550602061022060446379cc679061018052336101a0526004356101c05261019c60006005545af16132ae57600080fd5b601f3d116132bb57600080fd5b600050610220506024351515613310576000610180526101808051602001806101c08284600060045af16132ee57600080fd5b5050600060006101c0516101e061014051335af161330b57600080fd5b613369565b6020610220604463a9059cbb61018052336101a052610140516101c05261019c60006001600060c052602060c02001545af161334b57600080fd5b601f3d1161335857600080fd5b6000506102205161336857600080fd5b5b60043561018052610140516101a052337f9e96dd3b997a2a257eec4df9bb6eaf626e206df5f543bd963682d143300be3106040610180a261014051600052600062ffffff5560206000f350600062ffffff55005b633c157e64600051141561356c5734156133d657600080fd5b60045433146133e457600080fd5b600854620151808181830110156133fa57600080fd5b8082019050905042101561340d57600080fd5b426201518081818301101561342157600080fd5b80820190509050602435101561343657600080fd5b610140516006580161001b565b610160526101405261016051610140526004356064808202821582848304141761346c57600080fd5b80905090509050610160526000600435111561348f57620f424060043510613492565b60005b61349b57600080fd5b610140516101605110156134de576101405161016051600a80820282158284830414176134c757600080fd5b8090509050905010156134d957600080fd5b61350f565b61014051600a80820282158284830414176134f857600080fd5b8090509050905061016051111561350e57600080fd5b5b6101405160065561016051600755426008556024356009556101405161018052610160516101a052426101c0526024356101e0527fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2546080610180a1005b63551a658860005114156135fc57341561358557600080fd5b600454331461359357600080fd5b610140516006580161001b565b6101605261014052610160516101405261014051600655610140516007554260085542600955610140516101605242610180527f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019386040610160a1005b635b5a146760005114156136c557341561361557600080fd5b600454331461362357600080fd5b600a541561363057600080fd5b64012a05f200600435111561364457600080fd5b6402540be400602435111561365857600080fd5b426203f48081818301101561366c57600080fd5b808201905090506101405261014051600a55600435600c55602435600d556004356101605260243561018052610140517f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe06040610160a2005b634f12fe9760005114156137815762ffffff54156136e257600080fd5b600162ffffff5534156136f457600080fd5b600454331461370257600080fd5b600a5442101561371157600080fd5b6000600a541861372057600080fd5b6000600a55600c5461014052600d546101605261014051600255610160516003556101405161018052610160516101a0527fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d16040610180a1600062ffffff55005b63226840fb60005114156137af57341561379a57600080fd5b60045433146137a857600080fd5b6000600a55005b636b441a40600051141561384e5734156137c857600080fd5b60043560a01c156137d857600080fd5b60045433146137e657600080fd5b600b54156137f357600080fd5b426203f48081818301101561380757600080fd5b808201905090506101405261014051600b55600435600e55600435610140517f181aa3aa17d4cbf99265dd4443eba009433d3cde79d60164fde1d1a192beb93560006000a3005b636a1c05ae60005114156138ef5762ffffff541561386b57600080fd5b600162ffffff55341561387d57600080fd5b600454331461388b57600080fd5b600b5442101561389a57600080fd5b6000600b54186138a957600080fd5b6000600b55600e546101405261014051600455610140517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c60006000a2600062ffffff55005b6386fbf193600051141561391d57341561390857600080fd5b600454331461391657600080fd5b6000600b55005b6330c540856000511415613a4c5762ffffff541561393a57600080fd5b600162ffffff55341561394c57600080fd5b600454331461395a57600080fd5b600160c052602060c020546101405260006101405118156139b6576000610160526101608051602001806101a08284600060045af161399857600080fd5b5050600060006101a0516101c061014051335af16139b557600080fd5b5b6001600160c052602060c0200154610140526000610140511815613a2d576020610200604463a9059cbb610160523361018052610140516101a05261017c60006001600060c052602060c02001545af1613a0f57600080fd5b601f3d11613a1c57600080fd5b60005061020051613a2c57600080fd5b5b600160c052602060c020600081556000600182015550600062ffffff55005b63524c39016000511415613a8b573415613a6557600080fd5b6004543314613a7357600080fd5b600160c052602060c020600081556000600182015550005b63e36988536000511415613ac7573415613aa457600080fd5b6004543314613ab257600080fd5b4260105411613ac057600080fd5b6001600f55005b633046f9726000511415613af5573415613ae057600080fd5b6004543314613aee57600080fd5b6000600f55005b63c66106576000511415613b35573415613b0e57600080fd5b60043560028110613b1e57600080fd5b600060c052602060c020015460005260206000f350005b63e2e7d2646000511415613b75573415613b4e57600080fd5b60043560028110613b5e57600080fd5b600160c052602060c020015460005260206000f350005b63ddca3f436000511415613b9c573415613b8e57600080fd5b60025460005260206000f350005b63fee3f7f96000511415613bc3573415613bb557600080fd5b60035460005260206000f350005b638da5cb5b6000511415613bea573415613bdc57600080fd5b60045460005260206000f350005b6382c630666000511415613c11573415613c0357600080fd5b60055460005260206000f350005b635409491a6000511415613c38573415613c2a57600080fd5b60065460005260206000f350005b63b4b577ad6000511415613c5f573415613c5157600080fd5b60075460005260206000f350005b632081066c6000511415613c86573415613c7857600080fd5b60085460005260206000f350005b63140522886000511415613cad573415613c9f57600080fd5b60095460005260206000f350005b63405e28f86000511415613cd4573415613cc657600080fd5b600a5460005260206000f350005b63e0a0b5866000511415613cfb573415613ced57600080fd5b600b5460005260206000f350005b6358680d0b6000511415613d22573415613d1457600080fd5b600c5460005260206000f350005b63e38244626000511415613d49573415613d3b57600080fd5b600d5460005260206000f350005b631ec0cdc16000511415613d70573415613d6257600080fd5b600e5460005260206000f350005b5b60006000fd,
    },
    '0xc63b0708e2f7e69cb8a1df0e1389a98c35a76d52': {
      eth_getCode:
        '0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806370cf754a116100ee578063c45a015511610097578063ddca3f4311610071578063ddca3f4314610800578063f305839914610820578063f30dba9314610828578063f637731d146108aa576101ae565b8063c45a0155146107d1578063d0c93a7c146107d9578063d21220a7146107f8576101ae565b8063883bdbfd116100c8578063883bdbfd14610633578063a34123a71461073c578063a38807f214610776576101ae565b806370cf754a146105c65780638206a4d1146105ce57806385b66729146105f6576101ae565b80633850c7bd1161015b578063490e6cbc11610135578063490e6cbc146104705780634f1eb3d8146104fc578063514ea4bf1461054d5780635339c296146105a6576101ae565b80633850c7bd1461035b5780633c8a7d8d146103b45780634614131914610456576101ae565b80631ad8b03b1161018c5780631ad8b03b146102aa578063252c09d7146102e157806332148f6714610338576101ae565b80630dfe1681146101b3578063128acb08146101d75780631a68650214610286575b600080fd5b6101bb6108d0565b604080516001600160a01b039092168252519081900360200190f35b61026d600480360360a08110156101ed57600080fd5b6001600160a01b0382358116926020810135151592604082013592606083013516919081019060a08101608082013564010000000081111561022e57600080fd5b82018360208201111561024057600080fd5b8035906020019184600183028401116401000000008311171561026257600080fd5b5090925090506108f4565b6040805192835260208301919091528051918290030190f35b61028e6114ad565b604080516001600160801b039092168252519081900360200190f35b6102b26114bc565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6102fe600480360360208110156102f757600080fd5b50356114d6565b6040805163ffffffff909516855260069390930b60208501526001600160a01b039091168383015215156060830152519081900360800190f35b6103596004803603602081101561034e57600080fd5b503561ffff1661151c565b005b610363611616565b604080516001600160a01b03909816885260029690960b602088015261ffff9485168787015292841660608701529216608085015260ff90911660a0840152151560c0830152519081900360e00190f35b61026d600480360360a08110156103ca57600080fd5b6001600160a01b03823516916020810135600290810b92604083013590910b916001600160801b036060820135169181019060a08101608082013564010000000081111561041757600080fd5b82018360208201111561042957600080fd5b8035906020019184600183028401116401000000008311171561044b57600080fd5b509092509050611666565b61045e611922565b60408051918252519081900360200190f35b6103596004803603608081101561048657600080fd5b6001600160a01b0382351691602081013591604082013591908101906080810160608201356401000000008111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460018302840111640100000000831117156104f157600080fd5b509092509050611928565b6102b2600480360360a081101561051257600080fd5b506001600160a01b03813516906020810135600290810b91604081013590910b906001600160801b0360608201358116916080013516611d83565b61056a6004803603602081101561056357600080fd5b5035611f9d565b604080516001600160801b0396871681526020810195909552848101939093529084166060840152909216608082015290519081900360a00190f35b61045e600480360360208110156105bc57600080fd5b503560010b611fda565b61028e611fec565b610359600480360360408110156105e457600080fd5b5060ff81358116916020013516612010565b6102b26004803603606081101561060c57600080fd5b506001600160a01b03813516906001600160801b036020820135811691604001351661220f565b6106a36004803603602081101561064957600080fd5b81019060208101813564010000000081111561066457600080fd5b82018360208201111561067657600080fd5b8035906020019184602083028401116401000000008311171561069857600080fd5b5090925090506124dc565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106e75781810151838201526020016106cf565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561072657818101518382015260200161070e565b5050505090500194505050505060405180910390f35b61026d6004803603606081101561075257600080fd5b508035600290810b91602081013590910b90604001356001600160801b0316612569565b6107a06004803603604081101561078c57600080fd5b508035600290810b9160200135900b6126e0565b6040805160069490940b84526001600160a01b03909216602084015263ffffffff1682820152519081900360600190f35b6101bb6128d7565b6107e16128fb565b6040805160029290920b8252519081900360200190f35b6101bb61291f565b610808612943565b6040805162ffffff9092168252519081900360200190f35b61045e612967565b6108486004803603602081101561083e57600080fd5b503560020b61296d565b604080516001600160801b039099168952600f9790970b602089015287870195909552606087019390935260069190910b60808601526001600160a01b031660a085015263ffffffff1660c0840152151560e083015251908190036101000190f35b610359600480360360208110156108c057600080fd5b50356001600160a01b03166129db565b7f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e81565b6000806108ff612bf0565b85610936576040805162461bcd60e51b8152602060048201526002602482015261415360f01b604482015290519081900360640190fd5b6040805160e0810182526000546001600160a01b0381168252600160a01b8104600290810b810b900b602083015261ffff600160b81b8204811693830193909352600160c81b810483166060830152600160d81b8104909216608082015260ff600160e81b8304811660a0830152600160f01b909204909116151560c082018190526109ef576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b87610a3a5780600001516001600160a01b0316866001600160a01b0316118015610a35575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038716105b610a6c565b80600001516001600160a01b0316866001600160a01b0316108015610a6c57506401000276a36001600160a01b038716115b610aa3576040805162461bcd60e51b815260206004820152600360248201526214d41360ea1b604482015290519081900360640190fd5b6000805460ff60f01b191681556040805160c08101909152808a610ad25760048460a0015160ff16901c610ae5565b60108460a0015160ff1681610ae357fe5b065b60ff1681526004546001600160801b03166020820152604001610b06612c27565b63ffffffff168152602001600060060b815260200160006001600160a01b031681526020016000151581525090506000808913905060006040518060e001604052808b81526020016000815260200185600001516001600160a01b03168152602001856020015160020b81526020018c610b8257600254610b86565b6001545b815260200160006001600160801b0316815260200184602001516001600160801b031681525090505b805115801590610bd55750886001600160a01b031681604001516001600160a01b031614155b15610f9f57610be261560e565b60408201516001600160a01b031681526060820151610c25906006907f000000000000000000000000000000000000000000000000000000000000000a8f612c2b565b15156040830152600290810b810b60208301819052620d89e719910b1215610c5657620d89e7196020820152610c75565b6020810151620d89e860029190910b1315610c7557620d89e860208201525b610c828160200151612d6d565b6001600160a01b031660608201526040820151610d13908d610cbc578b6001600160a01b031683606001516001600160a01b031611610cd6565b8b6001600160a01b031683606001516001600160a01b0316105b610ce4578260600151610ce6565b8b5b60c085015185517f00000000000000000000000000000000000000000000000000000000000001f461309f565b60c085015260a084015260808301526001600160a01b031660408301528215610d7557610d498160c00151826080015101613291565b825103825260a0810151610d6b90610d6090613291565b6020840151906132a7565b6020830152610db0565b610d828160a00151613291565b825101825260c08101516080820151610daa91610d9f9101613291565b6020840151906132c3565b60208301525b835160ff1615610df6576000846000015160ff168260c0015181610dd057fe5b60c0840180519290910491829003905260a0840180519091016001600160801b03169052505b60c08201516001600160801b031615610e3557610e298160c00151600160801b8460c001516001600160801b03166132d9565b60808301805190910190525b80606001516001600160a01b031682604001516001600160a01b03161415610f5e57806040015115610f35578360a00151610ebf57610e9d846040015160008760200151886040015188602001518a606001516008613389909695949392919063ffffffff16565b6001600160a01b03166080860152600690810b900b6060850152600160a08501525b6000610f0b82602001518e610ed657600154610edc565b84608001515b8f610eeb578560800151610eef565b6002545b608089015160608a015160408b0151600595949392919061351c565b90508c15610f17576000035b610f258360c00151826135ef565b6001600160801b031660c0840152505b8b610f44578060200151610f4d565b60018160200151035b600290810b900b6060830152610f99565b80600001516001600160a01b031682604001516001600160a01b031614610f9957610f8c82604001516136a5565b600290810b900b60608301525b50610baf565b836020015160020b816060015160020b1461107a57600080610fed86604001518660400151886020015188602001518a606001518b6080015160086139d1909695949392919063ffffffff16565b604085015160608601516000805461ffff60c81b1916600160c81b61ffff958616021761ffff60b81b1916600160b81b95909416949094029290921762ffffff60a01b1916600160a01b62ffffff60029490940b93909316929092029190911773ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116179055506110ac9050565b60408101516000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b8060c001516001600160801b031683602001516001600160801b0316146110f25760c0810151600480546001600160801b0319166001600160801b039092169190911790555b8a1561114257608081015160015560a08101516001600160801b03161561113d5760a0810151600380546001600160801b031981166001600160801b03918216909301169190911790555b611188565b608081015160025560a08101516001600160801b0316156111885760a0810151600380546001600160801b03808216600160801b92839004821690940116029190911790555b8115158b1515146111a157602081015181518b036111ae565b80600001518a0381602001515b90965094508a156112e75760008512156111f0576111f07f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488d87600003613b86565b60006111fa613cd4565b9050336001600160a01b031663fa461e3388888c8c6040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b5050505061129e613cd4565b6112a88289613e0d565b11156112e1576040805162461bcd60e51b815260206004820152600360248201526249494160e81b604482015290519081900360640190fd5b50611411565b600086121561131e5761131e7f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e8d88600003613b86565b6000611328613e1d565b9050336001600160a01b031663fa461e3388888c8c6040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b1580156113ac57600080fd5b505af11580156113c0573d6000803e3d6000fd5b505050506113cc613e1d565b6113d68288613e0d565b111561140f576040805162461bcd60e51b815260206004820152600360248201526249494160e81b604482015290519081900360640190fd5b505b60408082015160c083015160608085015184518b8152602081018b90526001600160a01b03948516818701526001600160801b039093169183019190915260020b60808201529151908e169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679181900360a00190a350506000805460ff60f01b1916600160f01b17905550919890975095505050505050565b6004546001600160801b031681565b6003546001600160801b0380821691600160801b90041682565b60088161ffff81106114e757600080fd5b015463ffffffff81169150640100000000810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b600054600160f01b900460ff16611560576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b19169055611575612bf0565b60008054600160d81b900461ffff169061159160088385613eb5565b6000805461ffff808416600160d81b810261ffff60d81b19909316929092179092559192508316146115fe576040805161ffff80851682528316602082015281517fac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a929181900390910190a15b50506000805460ff60f01b1916600160f01b17905550565b6000546001600160a01b03811690600160a01b810460020b9061ffff600160b81b8204811691600160c81b8104821691600160d81b8204169060ff600160e81b8204811691600160f01b90041687565b600080548190600160f01b900460ff166116ad576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b191690556001600160801b0385166116cd57600080fd5b60008061171b60405180608001604052808c6001600160a01b031681526020018b60020b81526020018a60020b81526020016117118a6001600160801b0316613f58565b600f0b9052613f69565b9250925050819350809250600080600086111561173d5761173a613cd4565b91505b841561174e5761174b613e1d565b90505b336001600160a01b031663d348799787878b8b6040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b50505050600086111561183b576117f9613cd4565b6118038388613e0d565b111561183b576040805162461bcd60e51b815260206004820152600260248201526104d360f41b604482015290519081900360640190fd5b841561188b57611849613e1d565b6118538287613e0d565b111561188b576040805162461bcd60e51b81526020600482015260026024820152614d3160f01b604482015290519081900360640190fd5b8960020b8b60020b8d6001600160a01b03167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde338d8b8b60405180856001600160a01b03168152602001846001600160801b0316815260200183815260200182815260200194505050505060405180910390a450506000805460ff60f01b1916600160f01b17905550919890975095505050505050565b60025481565b600054600160f01b900460ff1661196c576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b19169055611981612bf0565b6004546001600160801b0316806119c3576040805162461bcd60e51b81526020600482015260016024820152601360fa1b604482015290519081900360640190fd5b60006119f8867f00000000000000000000000000000000000000000000000000000000000001f462ffffff16620f42406141a9565b90506000611a2f867f00000000000000000000000000000000000000000000000000000000000001f462ffffff16620f42406141a9565b90506000611a3b613cd4565b90506000611a47613e1d565b90508815611a7a57611a7a7f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e8b8b613b86565b8715611aab57611aab7f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488b8a613b86565b336001600160a01b031663e9cbafb085858a8a6040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015611b2d57600080fd5b505af1158015611b41573d6000803e3d6000fd5b505050506000611b4f613cd4565b90506000611b5b613e1d565b905081611b688588613e0d565b1115611ba0576040805162461bcd60e51b8152602060048201526002602482015261046360f41b604482015290519081900360640190fd5b80611bab8487613e0d565b1115611be3576040805162461bcd60e51b8152602060048201526002602482015261463160f01b604482015290519081900360640190fd5b8382038382038115611c725760008054600160e81b9004600f16908115611c16578160ff168481611c1057fe5b04611c19565b60005b90506001600160801b03811615611c4c57600380546001600160801b038082168401166001600160801b03199091161790555b611c66818503600160801b8d6001600160801b03166132d9565b60018054909101905550505b8015611cfd5760008054600160e81b900460041c600f16908115611ca2578160ff168381611c9c57fe5b04611ca5565b60005b90506001600160801b03811615611cd757600380546001600160801b03600160801b8083048216850182160291161790555b611cf1818403600160801b8d6001600160801b03166132d9565b60028054909101905550505b8d6001600160a01b0316336001600160a01b03167fbdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca6338f8f86866040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506000805460ff60f01b1916600160f01b179055505050505050505050505050565b600080548190600160f01b900460ff16611dca576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b19168155611de460073389896141e3565b60038101549091506001600160801b0390811690861611611e055784611e14565b60038101546001600160801b03165b60038201549093506001600160801b03600160801b909104811690851611611e3c5783611e52565b6003810154600160801b90046001600160801b03165b91506001600160801b03831615611eb7576003810180546001600160801b031981166001600160801b03918216869003821617909155611eb7907f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e908a908616613b86565b6001600160801b03821615611f1d576003810180546001600160801b03600160801b808304821686900382160291811691909117909155611f1d907f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48908a908516613b86565b604080516001600160a01b038a1681526001600160801b0380861660208301528416818301529051600288810b92908a900b9133917f70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0919081900360600190a4506000805460ff60f01b1916600160f01b17905590969095509350505050565b60076020526000908152604090208054600182015460028301546003909301546001600160801b0392831693919281811691600160801b90041685565b60066020526000908152604090205481565b7f0000000000000000000000000000000000005e8b2285f864419ac400be90719681565b600054600160f01b900460ff16612054576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b1916905560408051638da5cb5b60e01b815290516001600160a01b037f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f9841691638da5cb5b916004808301926020929190829003018186803b1580156120c157600080fd5b505afa1580156120d5573d6000803e3d6000fd5b505050506040513d60208110156120eb57600080fd5b50516001600160a01b0316331461210157600080fd5b60ff82161580612124575060048260ff16101580156121245750600a8260ff1611155b801561214e575060ff8116158061214e575060048160ff161015801561214e5750600a8160ff1611155b61215757600080fd5b60008054610ff0600484901b16840160ff908116600160e81b9081027fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841617909355919004167f973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b1336010826040805160ff9390920683168252600f600486901c16602083015286831682820152918516606082015290519081900360800190a150506000805460ff60f01b1916600160f01b17905550565b600080548190600160f01b900460ff16612256576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b1916905560408051638da5cb5b60e01b815290516001600160a01b037f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f9841691638da5cb5b916004808301926020929190829003018186803b1580156122c357600080fd5b505afa1580156122d7573d6000803e3d6000fd5b505050506040513d60208110156122ed57600080fd5b50516001600160a01b0316331461230357600080fd5b6003546001600160801b039081169085161161231f578361232c565b6003546001600160801b03165b6003549092506001600160801b03600160801b9091048116908416116123525782612366565b600354600160801b90046001600160801b03165b90506001600160801b038216156123e7576003546001600160801b038381169116141561239557600019909101905b600380546001600160801b031981166001600160801b039182168590038216179091556123e7907f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e9087908516613b86565b6001600160801b0381161561246d576003546001600160801b03828116600160801b90920416141561241857600019015b600380546001600160801b03600160801b80830482168590038216029181169190911790915561246d907f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489087908416613b86565b604080516001600160801b0380851682528316602082015281516001600160a01b0388169233927f596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151929081900390910190a36000805460ff60f01b1916600160f01b1790559094909350915050565b6060806124e7612bf0565b61255e6124f2612c27565b858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525054600454600896959450600160a01b820460020b935061ffff600160b81b8304811693506001600160801b0390911691600160c81b900416614247565b915091509250929050565b600080548190600160f01b900460ff166125b0576040805162461bcd60e51b81526020600482015260036024820152624c4f4b60e81b604482015290519081900360640190fd5b6000805460ff60f01b1916815560408051608081018252338152600288810b602083015287900b918101919091528190819061260990606081016125fc6001600160801b038a16613f58565b600003600f0b9052613f69565b925092509250816000039450806000039350600085118061262a5750600084115b15612669576003830180546001600160801b038082168089018216600160801b93849004831689019092169092029091176001600160801b0319161790555b604080516001600160801b0388168152602081018790528082018690529051600289810b92908b900b9133917f0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c919081900360600190a450506000805460ff60f01b1916600160f01b179055509094909350915050565b60008060006126ed612bf0565b6126f785856143a1565b600285810b810b60009081526005602052604080822087840b90930b825281206003830154600681900b9367010000000000000082046001600160a01b0316928492600160d81b810463ffffffff169284929091600160f81b900460ff168061275f57600080fd5b6003820154600681900b985067010000000000000081046001600160a01b03169650600160d81b810463ffffffff169450600160f81b900460ff16806127a457600080fd5b50506040805160e0810182526000546001600160a01b0381168252600160a01b8104600290810b810b810b6020840181905261ffff600160b81b8404811695850195909552600160c81b830485166060850152600160d81b8304909416608084015260ff600160e81b8304811660a0850152600160f01b909204909116151560c08301529093508e810b91900b1215905061284d575093909403965090039350900390506128d0565b8a60020b816020015160020b12156128c1576000612869612c27565b602083015160408401516004546060860151939450600093849361289f936008938893879392916001600160801b031690613389565b9a9003989098039b5050949096039290920396509091030392506128d0915050565b50949093039650039350900390505b9250925092565b7f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98481565b7f000000000000000000000000000000000000000000000000000000000000000a81565b7f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b7f00000000000000000000000000000000000000000000000000000000000001f481565b60015481565b60056020526000908152604090208054600182015460028301546003909301546001600160801b03831693600160801b909304600f0b9290600681900b9067010000000000000081046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1688565b6000546001600160a01b031615612a1e576040805162461bcd60e51b8152602060048201526002602482015261414960f01b604482015290519081900360640190fd5b6000612a29826136a5565b9050600080612a41612a39612c27565b60089061446a565b6040805160e0810182526001600160a01b038816808252600288810b6020808501829052600085870181905261ffff898116606088018190529089166080880181905260a08801839052600160c0909801979097528154600160f01b73ffffffffffffffffffffffffffffffffffffffff19909116871762ffffff60a01b1916600160a01b62ffffff9787900b9790971696909602959095177fffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffff16600160c81b9091021761ffff60d81b1916600160d81b909602959095177fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692909217909355835191825281019190915281519395509193507f98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c9592918290030190a150505050565b60008082600281900b620d89e71981612b9957fe5b05029050600083600281900b620d89e881612bb057fe5b0502905060008460020b83830360020b81612bc757fe5b0560010190508062ffffff166001600160801b03801681612be457fe5b0493505050505b919050565b306001600160a01b037f000000000000000000000000c63b0708e2f7e69cb8a1df0e1389a98c35a76d521614612c2557600080fd5b565b4290565b60008060008460020b8660020b81612c3f57fe5b05905060008660020b128015612c6657508460020b8660020b81612c5f57fe5b0760020b15155b15612c7057600019015b8315612ce557600080612c82836144b6565b600182810b810b600090815260208d9052604090205460ff83169190911b80016000190190811680151597509294509092509085612cc757888360ff16860302612cda565b88612cd1826144c8565b840360ff168603025b965050505050612d63565b600080612cf4836001016144b6565b91509150600060018260ff166001901b031990506000818b60008660010b60010b8152602001908152602001600020541690508060001415955085612d4657888360ff0360ff16866001010102612d5c565b8883612d5183614568565b0360ff168660010101025b9650505050505b5094509492505050565b60008060008360020b12612d84578260020b612d8c565b8260020b6000035b9050620d89e8811115612dca576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216612dde57600160801b612df0565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615612e24576ffff97272373d413259a46990580e213a0260801c5b6004821615612e43576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612e62576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615612e81576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615612ea0576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612ebf576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612ede576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615612efe576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615612f1e576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615612f3e576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612f5e576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612f7e576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612f9e576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612fbe576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612fde576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615612fff576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561301f576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561303e576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561305b576b048a170391f7dc42444e8fa20260801c5b60008460020b131561307657806000198161307257fe5b0490505b64010000000081061561308a57600161308d565b60005b60ff16602082901c0192505050919050565b60008080806001600160a01b03808916908a1610158187128015906131245760006130d88989620f42400362ffffff16620f42406132d9565b9050826130f1576130ec8c8c8c6001614652565b6130fe565b6130fe8b8d8c60016146cd565b955085811061310f578a965061311e565b61311b8c8b838661478a565b96505b5061316e565b8161313b576131368b8b8b60006146cd565b613148565b6131488a8c8b6000614652565b935083886000031061315c5789955061316e565b61316b8b8a8a600003856147d6565b95505b6001600160a01b038a81169087161482156131d15780801561318d5750815b6131a35761319e878d8c60016146cd565b6131a5565b855b95508080156131b2575081155b6131c8576131c3878d8c6000614652565b6131ca565b845b945061321b565b8080156131db5750815b6131f1576131ec8c888c6001614652565b6131f3565b855b9550808015613200575081155b613216576132118c888c60006146cd565b613218565b845b94505b8115801561322b57508860000385115b15613237578860000394505b81801561325657508a6001600160a01b0316876001600160a01b031614155b15613265578589039350613282565b61327f868962ffffff168a620f42400362ffffff166141a9565b93505b50505095509550955095915050565b6000600160ff1b82106132a357600080fd5b5090565b808203828113156000831215146132bd57600080fd5b92915050565b818101828112156000831215146132bd57600080fd5b600080806000198587098686029250828110908390030390508061330f576000841161330457600080fd5b508290049050613382565b80841161331b57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008063ffffffff8716613430576000898661ffff1661ffff81106133aa57fe5b60408051608081018252919092015463ffffffff8082168084526401000000008304600690810b810b900b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a161461341c57613419818a8988614822565b90505b806020015181604001519250925050613510565b8688036000806134458c8c858c8c8c8c6148d2565b91509150816000015163ffffffff168363ffffffff161415613477578160200151826040015194509450505050613510565b805163ffffffff8481169116141561349f578060200151816040015194509450505050613510565b8151815160208085015190840151918390039286039163ffffffff80841692908516910360060b816134cd57fe5b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b031602816134ff57fe5b048560400151019650965050505050505b97509795505050505050565b600295860b860b60009081526020979097526040909620600181018054909503909455938301805490920390915560038201805463ffffffff600160d81b6001600160a01b036701000000000000008085048216909603169094027fffffffffff0000000000000000000000000000000000000000ffffffffffffff90921691909117600681810b90960390950b66ffffffffffffff1666ffffffffffffff199095169490941782810485169095039093160263ffffffff60d81b1990931692909217905554600160801b9004600f0b90565b60008082600f0b121561365457826001600160801b03168260000384039150816001600160801b03161061364f576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6132bd565b826001600160801b03168284019150816001600160801b031610156132bd576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b038316108015906136e1575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b613716576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b77ffffffffffffffffffffffffffffffffffffffff00000000602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c979088119617909417909217179091171717608081106137b757607f810383901c91506137c1565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b146139c257886001600160a01b03166139a682612d6d565b6001600160a01b031611156139bb57816139bd565b805b6139c4565b815b9998505050505050505050565b6000806000898961ffff1661ffff81106139e757fe5b60408051608081018252919092015463ffffffff8082168084526401000000008304600690810b810b900b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089161415613a575788859250925050613510565b8461ffff168461ffff16118015613a7857506001850361ffff168961ffff16145b15613a8557839150613a89565b8491505b8161ffff168960010161ffff1681613a9d57fe5b069250613aac81898989614822565b8a8461ffff1661ffff8110613abd57fe5b825191018054602084015160408501516060909501511515600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001600160a01b03909616600160581b027fff0000000000000000000000000000000000000000ffffffffffffffffffffff60069390930b66ffffffffffffff16640100000000026affffffffffffff000000001963ffffffff90971663ffffffff199095169490941795909516929092171692909217929092161790555097509795505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b60208310613c025780518252601f199092019160209182019101613be3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613c64576040519150601f19603f3d011682016040523d82523d6000602084013e613c69565b606091505b5091509150818015613c97575080511580613c975750808060200190516020811015613c9457600080fd5b50515b613ccd576040805162461bcd60e51b81526020600482015260026024820152612a2360f11b604482015290519081900360640190fd5b5050505050565b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b17815291518151600093849384936001600160a01b037f000000000000000000000000853d955acef822db058eb8505911ed77f175b99e1693919290918291908083835b60208310613d6d5780518252601f199092019160209182019101613d4e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613dcd576040519150601f19603f3d011682016040523d82523d6000602084013e613dd2565b606091505b5091509150818015613de657506020815110155b613def57600080fd5b808060200190516020811015613e0457600080fd5b50519250505090565b808201828110156132bd57600080fd5b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b17815291518151600093849384936001600160a01b037f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4816939192909182919080838360208310613d6d5780518252601f199092019160209182019101613d4e565b6000808361ffff1611613ef3576040805162461bcd60e51b81526020600482015260016024820152604960f81b604482015290519081900360640190fd5b8261ffff168261ffff1611613f09575081613382565b825b8261ffff168161ffff161015613f4f576001858261ffff1661ffff8110613f2e57fe5b01805463ffffffff191663ffffffff92909216919091179055600101613f0b565b50909392505050565b80600f81900b8114612beb57600080fd5b6000806000613f76612bf0565b613f88846020015185604001516143a1565b6040805160e0810182526000546001600160a01b0381168252600160a01b8104600290810b810b900b602080840182905261ffff600160b81b8404811685870152600160c81b84048116606080870191909152600160d81b8504909116608086015260ff600160e81b8504811660a0870152600160f01b909404909316151560c08501528851908901519489015192890151939461402c9491939092909190614acf565b93508460600151600f0b6000146141a157846020015160020b816020015160020b12156140815761407a6140638660200151612d6d565b6140708760400151612d6d565b8760600151614c84565b92506141a1565b846040015160020b816020015160020b12156141775760045460408201516001600160801b03909116906140d3906140b7612c27565b60208501516060860151608087015160089493929187916139d1565b6000805461ffff60c81b1916600160c81b61ffff938416021761ffff60b81b1916600160b81b939092169290920217905581516040870151614123919061411990612d6d565b8860600151614c84565b93506141416141358760200151612d6d565b83516060890151614cc8565b92506141518187606001516135ef565b600480546001600160801b0319166001600160801b0392909216919091179055506141a1565b61419e6141878660200151612d6d565b6141948760400151612d6d565b8760600151614cc8565b91505b509193909250565b60006141b68484846132d9565b9050600082806141c257fe5b84860911156133825760001981106141d957600080fd5b6001019392505050565b6040805160609490941b6bffffffffffffffffffffffff1916602080860191909152600293840b60e890811b60348701529290930b90911b60378401528051808403601a018152603a90930181528251928201929092206000908152929052902090565b60608060008361ffff1611614287576040805162461bcd60e51b81526020600482015260016024820152604960f81b604482015290519081900360640190fd5b865167ffffffffffffffff8111801561429f57600080fd5b506040519080825280602002602001820160405280156142c9578160200160208202803683370190505b509150865167ffffffffffffffff811180156142e457600080fd5b5060405190808252806020026020018201604052801561430e578160200160208202803683370190505b50905060005b87518110156143945761433f8a8a8a848151811061432e57fe5b60200260200101518a8a8a8a613389565b84838151811061434b57fe5b6020026020010184848151811061435e57fe5b60200260200101826001600160a01b03166001600160a01b03168152508260060b60060b81525050508080600101915050614314565b5097509795505050505050565b8060020b8260020b126143e1576040805162461bcd60e51b8152602060048201526003602482015262544c5560e81b604482015290519081900360640190fd5b620d89e719600283900b1215614424576040805162461bcd60e51b8152602060048201526003602482015262544c4d60e81b604482015290519081900360640190fd5b620d89e8600282900b1315614466576040805162461bcd60e51b815260206004820152600360248201526254554d60e81b604482015290519081900360640190fd5b5050565b6040805160808101825263ffffffff9283168082526000602083018190529282019290925260016060909101819052835463ffffffff1916909117909116600160f81b17909155908190565b60020b600881901d9161010090910790565b60008082116144d657600080fd5b600160801b82106144e957608091821c91015b68010000000000000000821061450157604091821c91015b640100000000821061451557602091821c91015b62010000821061452757601091821c91015b610100821061453857600891821c91015b6010821061454857600491821c91015b6004821061455857600291821c91015b60028210612beb57600101919050565b600080821161457657600080fd5b5060ff6001600160801b0382161561459157607f1901614599565b608082901c91505b67ffffffffffffffff8216156145b257603f19016145ba565b604082901c91505b63ffffffff8216156145cf57601f19016145d7565b602082901c91505b61ffff8216156145ea57600f19016145f2565b601082901c91505b60ff821615614604576007190161460c565b600882901c91505b600f82161561461e5760031901614626565b600482901c91505b60038216156146385760011901614640565b600282901c91505b6001821615612beb5760001901919050565b6000836001600160a01b0316856001600160a01b03161115614672579293925b8161469f5761469a836001600160801b03168686036001600160a01b0316600160601b6132d9565b6146c2565b6146c2836001600160801b03168686036001600160a01b0316600160601b6141a9565b90505b949350505050565b6000836001600160a01b0316856001600160a01b031611156146ed579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b03868603811690871661472957600080fd5b8361475957866001600160a01b031661474c8383896001600160a01b03166132d9565b8161475357fe5b0461477f565b61477f6147708383896001600160a01b03166141a9565b886001600160a01b0316614cf7565b979650505050505050565b600080856001600160a01b0316116147a157600080fd5b6000846001600160801b0316116147b757600080fd5b816147c95761469a8585856001614d02565b6146c28585856001614de3565b600080856001600160a01b0316116147ed57600080fd5b6000846001600160801b03161161480357600080fd5b816148155761469a8585856000614de3565b6146c28585856000614d02565b61482a61564a565b600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b03161161487e576001614880565b845b6001600160801b031673ffffffff00000000000000000000000000000000608085901b16816148ab57fe5b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b6148da61564a565b6148e261564a565b888561ffff1661ffff81106148f357fe5b60408051608081018252919092015463ffffffff81168083526401000000008204600690810b810b900b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff1615156060820152925061495890899089614ed8565b15614990578663ffffffff16826000015163ffffffff16141561497a57613510565b8161498783898988614822565b91509150613510565b888361ffff168660010161ffff16816149a557fe5b0661ffff1661ffff81106149b557fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250614a6c57604080516080810182528a5463ffffffff811682526401000000008104600690810b810b900b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b614a7b88836000015189614ed8565b614ab2576040805162461bcd60e51b815260206004820152600360248201526213d31160ea1b604482015290519081900360640190fd5b614abf8989898887614f9b565b9150915097509795505050505050565b6000614ade60078787876141e3565b60015460025491925090600080600f87900b15614c24576000614aff612c27565b6000805460045492935090918291614b499160089186918591600160a01b810460020b9161ffff600160b81b83048116926001600160801b0390921691600160c81b900416613389565b9092509050614b8360058d8b8d8b8b87898b60007f0000000000000000000000000000000000005e8b2285f864419ac400be90719661513b565b9450614bba60058c8b8d8b8b87898b60017f0000000000000000000000000000000000005e8b2285f864419ac400be90719661513b565b93508415614bee57614bee60068d7f000000000000000000000000000000000000000000000000000000000000000a615325565b8315614c2057614c2060068c7f000000000000000000000000000000000000000000000000000000000000000a615325565b5050505b600080614c3660058c8c8b8a8a61538b565b9092509050614c47878a8484615437565b600089600f0b1215614c75578315614c6457614c6460058c6155cc565b8215614c7557614c7560058b6155cc565b50505050505095945050505050565b60008082600f0b12614caa57614ca5614ca085858560016146cd565b613291565b6146c5565b614cbd614ca085858560000360006146cd565b600003949350505050565b60008082600f0b12614ce457614ca5614ca08585856001614652565b614cbd614ca08585856000036000614652565b808204910615150190565b60008115614d755760006001600160a01b03841115614d3857614d3384600160601b876001600160801b03166132d9565b614d50565b6001600160801b038516606085901b81614d4e57fe5b045b9050614d6d614d686001600160a01b03881683613e0d565b6155f8565b9150506146c5565b60006001600160a01b03841115614da357614d9e84600160601b876001600160801b03166141a9565b614dba565b614dba606085901b6001600160801b038716614cf7565b905080866001600160a01b031611614dd157600080fd5b6001600160a01b0386160390506146c5565b600082614df15750836146c5565b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b168215614e91576001600160a01b03861684810290858281614e3157fe5b041415614e6257818101828110614e6057614e5683896001600160a01b0316836141a9565b93505050506146c5565b505b614e8882614e83878a6001600160a01b03168681614e7c57fe5b0490613e0d565b614cf7565b925050506146c5565b6001600160a01b03861684810290858281614ea857fe5b04148015614eb557508082115b614ebe57600080fd5b808203614e56614d68846001600160a01b038b16846141a9565b60008363ffffffff168363ffffffff1611158015614f0257508363ffffffff168263ffffffff1611155b15614f1e578163ffffffff168363ffffffff1611159050613382565b60008463ffffffff168463ffffffff1611614f46578363ffffffff1664010000000001614f4e565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611614f7f578363ffffffff1664010000000001614f87565b8363ffffffff165b64ffffffffff169091111595945050505050565b614fa361564a565b614fab61564a565b60008361ffff168560010161ffff1681614fc157fe5b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff87168281614fee57fe5b0661ffff8110614ffa57fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290955061506557806001019250614fd9565b898661ffff16826001018161507657fe5b0661ffff811061508257fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015285519094506000906150ed908b908b614ed8565b905080801561510657506151068a8a8760000151614ed8565b15615111575061512e565b8061512157600182039250615128565b8160010193505b50614fd9565b5050509550959350505050565b60028a810b900b600090815260208c90526040812080546001600160801b031682615166828d6135ef565b9050846001600160801b0316816001600160801b031611156151b4576040805162461bcd60e51b81526020600482015260026024820152614c4f60f01b604482015290519081900360640190fd5b6001600160801b03828116159082161581141594501561528a578c60020b8e60020b1361525a57600183018b9055600283018a90556003830180547fffffffffff0000000000000000000000000000000000000000ffffffffffffff166701000000000000006001600160a01b038c16021766ffffffffffffff191666ffffffffffffff60068b900b161763ffffffff60d81b1916600160d81b63ffffffff8a16021790555b6003830180547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160f81b1790555b82546001600160801b0319166001600160801b038216178355856152d35782546152ce906152c990600160801b9004600f90810b810b908f900b6132c3565b613f58565b6152f4565b82546152f4906152c990600160801b9004600f90810b810b908f900b6132a7565b8354600f9190910b6001600160801b03908116600160801b0291161790925550909c9b505050505050505050505050565b8060020b8260020b8161533457fe5b0760020b1561534257600080fd5b60008061535d8360020b8560020b8161535757fe5b056144b6565b600191820b820b60009081526020979097526040909620805460ff9097169190911b90951890945550505050565b600285810b80820b60009081526020899052604080822088850b850b83529082209193849391929184918291908a900b126153d1575050600182015460028301546153e4565b8360010154880391508360020154870390505b6000808b60020b8b60020b121561540657505060018301546002840154615419565b84600101548a0391508460020154890390505b92909803979097039b96909503949094039850939650505050505050565b6040805160a08101825285546001600160801b0390811682526001870154602083015260028701549282019290925260038601548083166060830152600160801b900490911660808201526000600f85900b6154d65781516001600160801b03166154ce576040805162461bcd60e51b815260206004820152600260248201526104e560f41b604482015290519081900360640190fd5b5080516154e5565b81516154e290866135ef565b90505b60006155098360200151860384600001516001600160801b0316600160801b6132d9565b9050600061552f8460400151860385600001516001600160801b0316600160801b6132d9565b905086600f0b6000146155565787546001600160801b0319166001600160801b0384161788555b60018801869055600288018590556001600160801b03821615158061558457506000816001600160801b0316115b156155c2576003880180546001600160801b031981166001600160801b039182168501821617808216600160801b9182900483168501909216021790555b5050505050505050565b600290810b810b6000908152602092909252604082208281556001810183905590810182905560030155565b806001600160a01b0381168114612beb57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160808101825260008082526020820181905291810182905260608101919091529056fea164736f6c6343000706000a',
    },
    '0xdac17f958d2ee523a2206206994597c13d831ec7': {
      eth_getCode:
        '0x606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461019b5780630753c30c14610229578063095ea7b3146102625780630e136b19146102a45780630ecb93c0146102d157806318160ddd1461030a57806323b872dd1461033357806326976e3f1461039457806327e235e3146103e9578063313ce56714610436578063353907141461045f5780633eaaf86b146104885780633f4ba83a146104b157806359bf1abe146104c65780635c658165146105175780635c975abb1461058357806370a08231146105b05780638456cb59146105fd578063893d20e8146106125780638da5cb5b1461066757806395d89b41146106bc578063a9059cbb1461074a578063c0324c771461078c578063cc872b66146107b8578063db006a75146107db578063dd62ed3e146107fe578063dd644f721461086a578063e47d606014610893578063e4997dc5146108e4578063e5b5019a1461091d578063f2fde38b14610946578063f3bdc2281461097f575b600080fd5b34156101a657600080fd5b6101ae6109b8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ee5780820151818401526020810190506101d3565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023457600080fd5b610260600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a56565b005b341561026d57600080fd5b6102a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b73565b005b34156102af57600080fd5b6102b7610cc1565b604051808215151515815260200191505060405180910390f35b34156102dc57600080fd5b610308600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cd4565b005b341561031557600080fd5b61031d610ded565b6040518082815260200191505060405180910390f35b341561033e57600080fd5b610392600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ebd565b005b341561039f57600080fd5b6103a761109d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103f457600080fd5b610420600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110c3565b6040518082815260200191505060405180910390f35b341561044157600080fd5b6104496110db565b6040518082815260200191505060405180910390f35b341561046a57600080fd5b6104726110e1565b6040518082815260200191505060405180910390f35b341561049357600080fd5b61049b6110e7565b6040518082815260200191505060405180910390f35b34156104bc57600080fd5b6104c46110ed565b005b34156104d157600080fd5b6104fd600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ab565b604051808215151515815260200191505060405180910390f35b341561052257600080fd5b61056d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611201565b6040518082815260200191505060405180910390f35b341561058e57600080fd5b610596611226565b604051808215151515815260200191505060405180910390f35b34156105bb57600080fd5b6105e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611239565b6040518082815260200191505060405180910390f35b341561060857600080fd5b610610611348565b005b341561061d57600080fd5b610625611408565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561067257600080fd5b61067a611431565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c757600080fd5b6106cf611456565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561070f5780820151818401526020810190506106f4565b50505050905090810190601f16801561073c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561075557600080fd5b61078a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114f4565b005b341561079757600080fd5b6107b6600480803590602001909190803590602001909190505061169e565b005b34156107c357600080fd5b6107d96004808035906020019091905050611783565b005b34156107e657600080fd5b6107fc600480803590602001909190505061197a565b005b341561080957600080fd5b610854600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b0d565b6040518082815260200191505060405180910390f35b341561087557600080fd5b61087d611c52565b6040518082815260200191505060405180910390f35b341561089e57600080fd5b6108ca600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c58565b604051808215151515815260200191505060405180910390f35b34156108ef57600080fd5b61091b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c78565b005b341561092857600080fd5b610930611d91565b6040518082815260200191505060405180910390f35b341561095157600080fd5b61097d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611db5565b005b341561098a57600080fd5b6109b6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e8a565b005b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab157600080fd5b6001600a60146101000a81548160ff02191690831515021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcc358699805e9a8b7f77b522628c7cb9abd07d9efb86b6fb616af1609036a99e81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b604060048101600036905010151515610b8b57600080fd5b600a60149054906101000a900460ff1615610cb157600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aee92d333385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515610c9857600080fd5b6102c65a03f11515610ca957600080fd5b505050610cbc565b610cbb838361200e565b5b505050565b600a60149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2f57600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600a60149054906101000a900460ff1615610eb457600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610e9257600080fd5b6102c65a03f11515610ea357600080fd5b505050604051805190509050610eba565b60015490505b90565b600060149054906101000a900460ff16151515610ed957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610f3257600080fd5b600a60149054906101000a900460ff161561108c57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b477adb338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b151561107357600080fd5b6102c65a03f1151561108457600080fd5b505050611098565b6110978383836121ab565b5b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b60095481565b60045481565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114857600080fd5b600060149054906101000a900460ff16151561116357600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600060149054906101000a900460ff1681565b6000600a60149054906101000a900460ff161561133757600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561131557600080fd5b6102c65a03f1151561132657600080fd5b505050604051805190509050611343565b61134082612652565b90505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a357600080fd5b600060149054906101000a900460ff161515156113bf57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ec5780601f106114c1576101008083540402835291602001916114ec565b820191906000526020600020905b8154815290600101906020018083116114cf57829003601f168201915b505050505081565b600060149054906101000a900460ff1615151561151057600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561156957600080fd5b600a60149054906101000a900460ff161561168f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e18980a3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b151561167657600080fd5b6102c65a03f1151561168757600080fd5b50505061169a565b611699828261269b565b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f957600080fd5b60148210151561170857600080fd5b60328110151561171757600080fd5b81600381905550611736600954600a0a82612a0390919063ffffffff16565b6004819055507fb044a1e409eac5c48e5af22d4af52670dd1a99059537a78b31b48c6500a6354e600354600454604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117de57600080fd5b60015481600154011115156117f257600080fd5b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156118c257600080fd5b80600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806001600082825401925050819055507fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a816040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d557600080fd5b80600154101515156119e657600080fd5b80600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a5557600080fd5b8060016000828254039250508190555080600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a44816040518082815260200191505060405180910390a150565b6000600a60149054906101000a900460ff1615611c3f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611c1d57600080fd5b6102c65a03f11515611c2e57600080fd5b505050604051805190509050611c4c565b611c498383612a3e565b90505b92915050565b60035481565b60066020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cd357600080fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e1057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611e8757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ee757600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611f3f57600080fd5b611f4882611239565b90506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806001600082825403925050819055507f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c68282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60406004810160003690501015151561202657600080fd5b600082141580156120b457506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1515156120c057600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3505050565b60008060006060600481016000369050101515156121c857600080fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935061227061271061226260035488612a0390919063ffffffff16565b612ac590919063ffffffff16565b92506004548311156122825760045492505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84101561233e576122bd8585612ae090919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6123518386612ae090919063ffffffff16565b91506123a585600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ae090919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061243a82600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008311156125e4576124f983600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806040600481016000369050101515156126b657600080fd5b6126df6127106126d160035487612a0390919063ffffffff16565b612ac590919063ffffffff16565b92506004548311156126f15760045492505b6127048385612ae090919063ffffffff16565b915061275884600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ae090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127ed82600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000831115612997576128ac83600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050505050565b6000806000841415612a185760009150612a37565b8284029050828482811515612a2957fe5b04141515612a3357fe5b8091505b5092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808284811515612ad357fe5b0490508091505092915050565b6000828211151515612aee57fe5b818303905092915050565b6000808284019050838110151515612b0d57fe5b80915050929150505600a165627a7a72305820645ee12d73db47fd78ba77fa1f824c3c8f9184061b3b10386beb4dc9236abb280029',
    },
    '0xc0ee9db1a9e07ca63e4ff0d5fb6f86bf68d47b89': {
      eth_getCode:
        '0x606060405236156100b95760e060020a600035046313af4035811461019e57806326f5a8c9146101c1578063371fa854146101ca5780634162169f146101d35780634c8fe526146101e55780635970c915146101f757806361bc221a14610209578063625e847d146102125780636637b882146102325780637f9f519f146102555780638da5cb5b14610278578063a9059cbb1461028a578063c4463c80146102b0578063c9d27afe146102df578063e66f53b714610305575b6103176002547f0e708203000000000000000000000000000000000000000000000000000000006060908152600091600160a060020a031690630e7082039060649060209060048187876161da5a03f1156100025750506040515133600160a060020a039081169116149050610329576040805133600160a060020a03166020820152818152600f818301527f636f6e73747563746f72206661696c0000000000000000000000000000000000606082015290517fa6af7265d7ede5fbf0ee375956b52b362800d4f92e268809bef5fdf2a57924b89181900360800190a15060015b90565b61031760043560008054600160a060020a03908116339091161461049257610002565b61047560055481565b61047560045481565b61047f600254600160a060020a031681565b61047f600654600160a060020a031681565b61047f600754600160a060020a031681565b61047560035481565b61031760008054600160a060020a0390811633909116146104ef57610002565b61031760043560008054600160a060020a03908116339091161461057a57610002565b61031760043560008054600160a060020a0390811633909116146105d757610002565b61047f600054600160a060020a031681565b61031760043560243560008054600160a060020a03908116339091161461060f57610002565b61031760043560243560443560643560843560008054600160a060020a0390811633909116146106a657610002565b61031760043560243560008054600160a060020a0390811633909116146107bb57610002565b61047f600154600160a060020a031681565b60408051918252519081900360200190f35b60055460035460001990910190111561040257604080516002546006547f70a0823100000000000000000000000000000000000000000000000000000000835230600160a060020a03908116600485015293519184169363a9059cbb9391169184916370a0823191602480830192602092919082900301818a876161da5a03f11561000257505060408051805160e060020a63a9059cbb028252600482019490945260248101939093525160448084019360209350829003018187876161da5a03f11561000257505060016003819055915061019b9050565b6040805160038054600190810190915560025460048054925460e260020a632099877102855290840192909252600160a060020a03918216602484015292519216916382661dc491604480820192602092909190829003018187876161da5a03f11561000257506001925061019b915050565b6060908152602090f35b600160a060020a03166060908152602090f35b600160a060020a03821660609081527f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc90602090a181600060006101000a815481600160a060020a0302191690830217905550600190505b919050565b6001600355600754600160a060020a03908116908290301631606082818181858883f15050604080516002546001546004805460e260020a632099877102855290840152600160a060020a0390811660248401529251921694506382661dc493506044808201935060209291829003018187876161da5a03f11561000257506001925061019b915050565b6002805473ffffffffffffffffffffffffffffffffffffffff1916831790819055600160a060020a031660609081527fce6a5015a40a2ec38ce912a63bca374d85386207c6927d284292449f1431082290602090a15060016104ea565b600582905560608281527fbab6859bc098da798dbdc4860f0fee7467d703dadd975799e8c258b46a37d3de90602090a15060016104ea565b60025460e060020a63a9059cbb026060908152600160a060020a0385811660645260848590529091169063a9059cbb9060a49060209060448187876161da5a03f11561000257505060408051600160a060020a03861681526020810185905281517f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de293509081900390910190a15060015b92915050565b6006805473ffffffffffffffffffffffffffffffffffffffff1990811686179091556001600381905580548216871790556004879055600584905560078054909116831790819055600160a060020a03908116908290301631606082818181858883f15050604080516002546004805460015460e260020a632099877102855291840152600160a060020a0390811660248401529251921694506382661dc493506044808201935060209291829003018187876161da5a03f11561000257505060408051600454600654908252600160a060020a0316602082015281517fa1ab731770d71027cd294cc0af5c8f5ec3c2ff5dbe6b75d68963d17192f8377b93509081900390910190a150600195945050505050565b6002547fc9d27afe0000000000000000000000000000000000000000000000000000000060609081526064859052831515608452600160a060020a039091169063c9d27afe9060a49060209060448187876161da5a03f11561000257505060408051858152841515602082015281517f8bfa1f40665434b48e7becc865cc0586ce3d6d2388521c05d4db87536ac8279993509081900390910190a15060016106a056',
    },
    '0xb2dd0dc22c7d103928650abd260935ef9ef40cfc': {
      eth_getCode:
        '',
    },
    '0x839c6ca36f51fc2dbf466e027b8a57f840dc9c57': {
      eth_getCode:
        '0x6080604052600436106102fe5760003560e01c80636c2d3c4f11610190578063bc63f02e116100dc578063e268e4d311610095578063f2c4ce1e1161006f578063f2c4ce1e14610866578063f2fde38b14610886578063fea0e058146108a6578063fff8d2fc146108c657600080fd5b8063e268e4d314610806578063e985e9c514610826578063f12f6d5d1461084657600080fd5b8063bc63f02e1461075a578063bd7a19981461077a578063bde0608a14610790578063c87b56dd146107b0578063d5abeb01146107d0578063dc33e681146107e657600080fd5b80638da5cb5b11610149578063a0712d6811610123578063a0712d68146106fe578063a22cb46514610711578063a96199f614610731578063b88d4fde1461074757600080fd5b80638da5cb5b146106ab578063940cd05b146106c957806395d89b41146106e957600080fd5b80636c2d3c4f146105e657806370a08231146105fc578063715018a61461061c5780637cb64759146106315780638462151c146106515780638b14966b1461067e57600080fd5b80632eb4a7ab1161024f57806351830227116102085780635c975abb116101e25780635c975abb146105815780636352211e1461059b5780636826bca8146105bb5780636c0360eb146105d157600080fd5b8063518302271461052257806355f804b3146105415780635a7adf7f1461056157600080fd5b80632eb4a7ab1461048f5780633ccfd60b146104a557806341f43434146104ad57806342842e0e146104cf57806344a0d68a146104e2578063458c4f9e1461050257600080fd5b8063081c8c44116102bc57806313faede61161029657806313faede614610429578063149835a01461043f57806318160ddd1461045f57806323b872dd1461047c57600080fd5b8063081c8c44146103eb578063095ea7b3146104005780630bddb6131461041357600080fd5b806277ec051461030357806301ffc9a71461032c57806302329a291461035c578063036e4cb51461037e57806306fdde0314610391578063081812fc146103b3575b600080fd5b34801561030f57600080fd5b5061031960125481565b6040519081526020015b60405180910390f35b34801561033857600080fd5b5061034c610347366004611fb3565b6108f3565b6040519015158152602001610323565b34801561036857600080fd5b5061037c610377366004611fde565b610945565b005b61037c61038c366004611ffb565b610960565b34801561039d57600080fd5b506103a6610c9f565b60405161032391906120ca565b3480156103bf57600080fd5b506103d36103ce3660046120dd565b610d31565b6040516001600160a01b039091168152602001610323565b3480156103f757600080fd5b506103a6610d75565b61037c61040e366004612112565b610e03565b34801561041f57600080fd5b50610319600f5481565b34801561043557600080fd5b50610319600c5481565b34801561044b57600080fd5b5061037c61045a3660046120dd565b610ea3565b34801561046b57600080fd5b506001546000540360001901610319565b61037c61048a36600461213c565b610eb0565b34801561049b57600080fd5b5061031960145481565b61037c610edb565b3480156104b957600080fd5b506103d36daaeb6d7670e522a718067333cd4e81565b61037c6104dd36600461213c565b610f28565b3480156104ee57600080fd5b5061037c6104fd3660046120dd565b610f4d565b34801561050e57600080fd5b5061037c61051d3660046120dd565b610f5a565b34801561052e57600080fd5b5060135461034c90610100900460ff1681565b34801561054d57600080fd5b5061037c61055c366004612204565b610f67565b34801561056d57600080fd5b5060135461034c9062010000900460ff1681565b34801561058d57600080fd5b5060135461034c9060ff1681565b3480156105a757600080fd5b506103d36105b63660046120dd565b610f7f565b3480156105c757600080fd5b5061031960105481565b3480156105dd57600080fd5b506103a6610f8a565b3480156105f257600080fd5b50610319600d5481565b34801561060857600080fd5b5061031961061736600461224d565b610f97565b34801561062857600080fd5b5061037c610fe6565b34801561063d57600080fd5b5061037c61064c3660046120dd565b610ff8565b34801561065d57600080fd5b5061067161066c36600461224d565b611005565b6040516103239190612268565b34801561068a57600080fd5b5061031961069936600461224d565b60166020526000908152604090205481565b3480156106b757600080fd5b506008546001600160a01b03166103d3565b3480156106d557600080fd5b5061037c6106e4366004611fde565b61110e565b3480156106f557600080fd5b506103a6611130565b61037c61070c3660046120dd565b61113f565b34801561071d57600080fd5b5061037c61072c3660046122a0565b6113ab565b34801561073d57600080fd5b5061031960175481565b61037c6107553660046122d7565b611417565b34801561076657600080fd5b5061037c610775366004612353565b611444565b34801561078657600080fd5b5061031960115481565b34801561079c57600080fd5b5061037c6107ab3660046120dd565b6114d8565b3480156107bc57600080fd5b506103a66107cb3660046120dd565b6114e5565b3480156107dc57600080fd5b50610319600e5481565b3480156107f257600080fd5b5061031961080136600461224d565b611657565b34801561081257600080fd5b5061037c6108213660046120dd565b611682565b34801561083257600080fd5b5061034c61084136600461237f565b61168f565b34801561085257600080fd5b5061037c6108613660046120dd565b6116bd565b34801561087257600080fd5b5061037c610881366004612204565b6116ca565b34801561089257600080fd5b5061037c6108a136600461224d565b6116de565b3480156108b257600080fd5b5061037c6108c1366004611fde565b611754565b3480156108d257600080fd5b506103196108e136600461224d565b60156020526000908152604090205481565b60006301ffc9a760e01b6001600160e01b03198316148061092457506380ac58cd60e01b6001600160e01b03198316145b8061093f5750635b5e139f60e01b6001600160e01b03198316145b92915050565b61094d611778565b6013805460ff1916911515919091179055565b6109686117d2565b60135460ff16156109c05760405162461bcd60e51b815260206004820152601c60248201527f464f583a206f6f707320636f6e7472616374206973207061757365640000000060448201526064015b60405180910390fd5b60135462010000900460ff16610a185760405162461bcd60e51b815260206004820152601f60248201527f464f583a2050726573616c65204861736e27742073746172746564207965740060448201526064016109b7565b610a8d828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014546040516bffffffffffffffffffffffff193360601b16602082015290925060340190506040516020818303038152906040528051906020012061182b565b610ad95760405162461bcd60e51b815260206004820152601c60248201527f464f583a20596f7520617265206e6f742057686974656c69737465640000000060448201526064016109b7565b60125433600090815260166020526040902054610af79085906123bf565b1115610b455760405162461bcd60e51b815260206004820181905260248201527f464f583a204d6178204e4654205065722057616c6c657420657863656564656460448201526064016109b7565b601254831115610b975760405162461bcd60e51b815260206004820152601d60248201527f464f583a206d6178206d696e742070657220547820657863656564656400000060448201526064016109b7565b600f546001546000548591900360001901610bb291906123bf565b1115610c0a5760405162461bcd60e51b815260206004820152602160248201527f464f583a2057686974656c697374204d6178537570706c7920657863656564656044820152601960fa1b60648201526084016109b7565b82600d54610c1891906123d2565b341015610c615760405162461bcd60e51b8152602060048201526017602482015276464f583a20696e73756666696369656e742066756e647360481b60448201526064016109b7565b3360009081526016602052604081208054859290610c809084906123bf565b90915550610c9090503384611841565b610c9a6001600955565b505050565b606060028054610cae906123e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610cda906123e9565b8015610d275780601f10610cfc57610100808354040283529160200191610d27565b820191906000526020600020905b815481529060010190602001808311610d0a57829003601f168201915b5050505050905090565b6000610d3c8261185b565b610d59576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600b8054610d82906123e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610dae906123e9565b8015610dfb5780601f10610dd057610100808354040283529160200191610dfb565b820191906000526020600020905b815481529060010190602001808311610dde57829003601f168201915b505050505081565b6000610e0e82610f7f565b9050336001600160a01b03821614610e4757610e2a813361168f565b610e47576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610eab611778565b600e55565b826001600160a01b0381163314610eca57610eca33611890565b610ed5848484611949565b50505050565b610ee3611778565b610eeb6117d2565b6040514790339082156108fc029083906000818181858888f19350505050158015610f1a573d6000803e3d6000fd5b5050610f266001600955565b565b826001600160a01b0381163314610f4257610f4233611890565b610ed5848484611ae2565b610f55611778565b600c55565b610f62611778565b600f55565b610f6f611778565b600a610f7b8282612469565b5050565b600061093f82611afd565b600a8054610d82906123e9565b60006001600160a01b038216610fc0576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610fee611778565b610f266000611b6c565b611000611778565b601455565b6060600080600061101585610f97565b905060008167ffffffffffffffff81111561103257611032612178565b60405190808252806020026020018201604052801561105b578160200160208202803683370190505b50905061108860408051608081018252600080825260208201819052918101829052606081019190915290565b60015b8386146111025761109b81611bbe565b915081604001516110fa5781516001600160a01b0316156110bb57815194505b876001600160a01b0316856001600160a01b0316036110fa57808387806001019850815181106110ed576110ed612529565b6020026020010181815250505b60010161108b565b50909695505050505050565b611116611778565b601380549115156101000261ff0019909216919091179055565b606060038054610cae906123e9565b6111476117d2565b60135460ff161561119a5760405162461bcd60e51b815260206004820152601c60248201527f464f583a206f6f707320636f6e7472616374206973207061757365640000000060448201526064016109b7565b60135462010000900460ff16156111f35760405162461bcd60e51b815260206004820152601c60248201527f464f583a2053616c65204861736e27742073746172746564207965740000000060448201526064016109b7565b6011548111156112515760405162461bcd60e51b8152602060048201526024808201527f464f583a206d6178206d696e7420616d6f756e742070657220747820657863656044820152631959195960e21b60648201526084016109b7565b600e54600154600054839190036000190161126c91906123bf565b11156112ac5760405162461bcd60e51b815260206004820152600f60248201526e1193d60e8815d94814dbdb191bdd5d608a1b60448201526064016109b7565b601154336000908152601560205260409020546112ca9083906123bf565b11156113185760405162461bcd60e51b815260206004820181905260248201527f464f583a204d6178204e4654205065722057616c6c657420657863656564656460448201526064016109b7565b80600c5461132691906123d2565b34101561136f5760405162461bcd60e51b8152602060048201526017602482015276464f583a20696e73756666696369656e742066756e647360481b60448201526064016109b7565b336000908152601560205260408120805483929061138e9084906123bf565b9091555061139e90503382611841565b6113a86001600955565b50565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b836001600160a01b03811633146114315761143133611890565b61143d85858585611c3d565b5050505050565b61144c611778565b6114546117d2565b6010548260175461146591906123bf565b11156114ac5760405162461bcd60e51b81526020600482015260166024820152751b585e08139195081b1a5b5a5d08195e18d95959195960521b60448201526064016109b7565b81601760008282546114be91906123bf565b909155506114ce90508183611841565b610f7b6001600955565b6114e0611778565b601255565b60606114f08261185b565b6115555760405162461bcd60e51b815260206004820152603060248201527f455243373231414d657461646174613a2055524920717565727920666f72206e60448201526f37b732bc34b9ba32b73a103a37b5b2b760811b60648201526084016109b7565b601354610100900460ff1615156000036115fb57600b8054611576906123e9565b80601f01602080910402602001604051908101604052809291908181526020018280546115a2906123e9565b80156115ef5780601f106115c4576101008083540402835291602001916115ef565b820191906000526020600020905b8154815290600101906020018083116115d257829003601f168201915b50505050509050919050565b6000611605611c81565b905060008151116116255760405180602001604052806000815250611650565b8061162f84611c90565b60405160200161164092919061253f565b6040516020818303038152906040525b9392505050565b6001600160a01b0381166000908152600560205260408082205467ffffffffffffffff911c1661093f565b61168a611778565b601155565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6116c5611778565b600d55565b6116d2611778565b600b610f7b8282612469565b6116e6611778565b6001600160a01b03811661174b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b7565b6113a881611b6c565b61175c611778565b60138054911515620100000262ff000019909216919091179055565b6008546001600160a01b03163314610f265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109b7565b6002600954036118245760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109b7565b6002600955565b6000826118388584611cd4565b14949350505050565b610f7b828260405180602001604052806000815250611d21565b60008160011115801561186f575060005482105b801561093f575050600090815260046020526040902054600160e01b161590565b6daaeb6d7670e522a718067333cd4e3b156113a857604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611921919061257e565b6113a857604051633b79c77360e21b81526001600160a01b03821660048201526024016109b7565b600061195482611afd565b9050836001600160a01b0316816001600160a01b0316146119875760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b038816909114176119d4576119b7863361168f565b6119d457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166119fb57604051633a954ecd60e21b815260040160405180910390fd5b8015611a0657600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003611a9857600184016000818152600460205260408120549003611a96576000548114611a965760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b610c9a83838360405180602001604052806000815250611417565b60008180600111611b5357600054811015611b535760008181526004602052604081205490600160e01b82169003611b51575b80600003611650575060001901600081815260046020526040902054611b30565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051608081018252600080825260208201819052918101829052606081019190915260008281526004602052604090205461093f90604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b611c48848484610eb0565b6001600160a01b0383163b15610ed557611c6484848484611d87565b610ed5576040516368d2bf6b60e11b815260040160405180910390fd5b6060600a8054610cae906123e9565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480611caa5750819003601f19909101908152919050565b600081815b8451811015611d1957611d0582868381518110611cf857611cf8612529565b6020026020010151611e73565b915080611d118161259b565b915050611cd9565b509392505050565b611d2b8383611e9f565b6001600160a01b0383163b15610c9a576000548281035b611d556000868380600101945086611d87565b611d72576040516368d2bf6b60e11b815260040160405180910390fd5b818110611d4257816000541461143d57600080fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611dbc9033908990889088906004016125b4565b6020604051808303816000875af1925050508015611df7575060408051601f3d908101601f19168201909252611df4918101906125f1565b60015b611e55573d808015611e25576040519150601f19603f3d011682016040523d82523d6000602084013e611e2a565b606091505b508051600003611e4d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6000818310611e8f576000828152602084905260409020611650565b5060009182526020526040902090565b6000805490829003611ec45760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114611f7357808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101611f3b565b5081600003611f9457604051622e076360e81b815260040160405180910390fd5b60005550505050565b6001600160e01b0319811681146113a857600080fd5b600060208284031215611fc557600080fd5b813561165081611f9d565b80151581146113a857600080fd5b600060208284031215611ff057600080fd5b813561165081611fd0565b60008060006040848603121561201057600080fd5b83359250602084013567ffffffffffffffff8082111561202f57600080fd5b818601915086601f83011261204357600080fd5b81358181111561205257600080fd5b8760208260051b850101111561206757600080fd5b6020830194508093505050509250925092565b60005b8381101561209557818101518382015260200161207d565b50506000910152565b600081518084526120b681602086016020860161207a565b601f01601f19169290920160200192915050565b602081526000611650602083018461209e565b6000602082840312156120ef57600080fd5b5035919050565b80356001600160a01b038116811461210d57600080fd5b919050565b6000806040838503121561212557600080fd5b61212e836120f6565b946020939093013593505050565b60008060006060848603121561215157600080fd5b61215a846120f6565b9250612168602085016120f6565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156121a9576121a9612178565b604051601f8501601f19908116603f011681019082821181831017156121d1576121d1612178565b816040528093508581528686860111156121ea57600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561221657600080fd5b813567ffffffffffffffff81111561222d57600080fd5b8201601f8101841361223e57600080fd5b611e6b8482356020840161218e565b60006020828403121561225f57600080fd5b611650826120f6565b6020808252825182820181905260009190848201906040850190845b8181101561110257835183529284019291840191600101612284565b600080604083850312156122b357600080fd5b6122bc836120f6565b915060208301356122cc81611fd0565b809150509250929050565b600080600080608085870312156122ed57600080fd5b6122f6856120f6565b9350612304602086016120f6565b925060408501359150606085013567ffffffffffffffff81111561232757600080fd5b8501601f8101871361233857600080fd5b6123478782356020840161218e565b91505092959194509250565b6000806040838503121561236657600080fd5b82359150612376602084016120f6565b90509250929050565b6000806040838503121561239257600080fd5b61239b836120f6565b9150612376602084016120f6565b634e487b7160e01b600052601160045260246000fd5b8082018082111561093f5761093f6123a9565b808202811582820484141761093f5761093f6123a9565b600181811c908216806123fd57607f821691505b60208210810361241d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610c9a57600081815260208120601f850160051c8101602086101561244a5750805b601f850160051c820191505b81811015611ada57828155600101612456565b815167ffffffffffffffff81111561248357612483612178565b6124978161249184546123e9565b84612423565b602080601f8311600181146124cc57600084156124b45750858301515b600019600386901b1c1916600185901b178555611ada565b600085815260208120601f198616915b828110156124fb578886015182559484019460019091019084016124dc565b50858210156125195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000835161255181846020880161207a565b83519083019061256581836020880161207a565b64173539b7b760d91b9101908152600501949350505050565b60006020828403121561259057600080fd5b815161165081611fd0565b6000600182016125ad576125ad6123a9565b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125e79083018461209e565b9695505050505050565b60006020828403121561260357600080fd5b815161165081611f9d56fea26469706673582212205714a24d6fcc7477d29f22dba864726612888c3edca4e2a3261647cbbd1119f564736f6c63430008110033',
    },
    '0x4b92d19c11435614cd49af1b589001b7c08cd4d5': {
      eth_getCode:
        '0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100985780635c60da1b146101185780638f28397014610149578063f851a4401461017c5761005d565b3661005d5761005b610191565b005b61005b610191565b34801561007157600080fd5b5061005b6004803603602081101561008857600080fd5b50356001600160a01b03166101ab565b61005b600480360360408110156100ae57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100d957600080fd5b8201836020820111156100eb57600080fd5b8035906020019184600183028401116401000000008311171561010d57600080fd5b5090925090506101e5565b34801561012457600080fd5b5061012d610292565b604080516001600160a01b039092168252519081900360200190f35b34801561015557600080fd5b5061005b6004803603602081101561016c57600080fd5b50356001600160a01b03166102cf565b34801561018857600080fd5b5061012d610389565b6101996103ba565b6101a96101a461041a565b61043f565b565b6101b3610463565b6001600160a01b0316336001600160a01b031614156101da576101d581610488565b6101e2565b6101e2610191565b50565b6101ed610463565b6001600160a01b0316336001600160a01b031614156102855761020f83610488565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461026c576040519150601f19603f3d011682016040523d82523d6000602084013e610271565b606091505b505090508061027f57600080fd5b5061028d565b61028d610191565b505050565b600061029c610463565b6001600160a01b0316336001600160a01b031614156102c4576102bd61041a565b90506102cc565b6102cc610191565b90565b6102d7610463565b6001600160a01b0316336001600160a01b031614156101da576001600160a01b0381166103355760405162461bcd60e51b81526004018080602001828103825260368152602001806105876036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61035e610463565b604080516001600160a01b03928316815291841660208301528051918290030190a16101d5816104c8565b6000610393610463565b6001600160a01b0316336001600160a01b031614156102c4576102bd610463565b3b151590565b6103c2610463565b6001600160a01b0316336001600160a01b031614156104125760405162461bcd60e51b81526004018080602001828103825260328152602001806105556032913960400191505060405180910390fd5b6101a96101a9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561045e573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b610491816104ec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104f5816103b4565b6105305760405162461bcd60e51b815260040180806020018281038252603b8152602001806105bd603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a2646970667358221220401c74d3e7f766707c9c2337d22314b5f19323083d6f9ef3755e9b0bbab43a3364736f6c634300060c0033',
    },
    '0xffaef3f8a37014b932334d283f90a2408eba0328': {
      eth_getCode:
        '',
    },
    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48': {
      eth_getCode:
        '0x60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633659cfe6146100775780634f1ef286146100ba5780635c60da1b146101085780638f2839701461015f578063f851a440146101a2575b6100756101f9565b005b34801561008357600080fd5b506100b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610213565b005b610106600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050610268565b005b34801561011457600080fd5b5061011d610308565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016b57600080fd5b506101a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610360565b005b3480156101ae57600080fd5b506101b761051e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610201610576565b61021161020c610651565b610682565b565b61021b6106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561025c57610257816106d9565b610265565b6102646101f9565b5b50565b6102706106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102fa576102ac836106d9565b3073ffffffffffffffffffffffffffffffffffffffff163483836040518083838082843782019150509250505060006040518083038185875af19250505015156102f557600080fd5b610303565b6103026101f9565b5b505050565b60006103126106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103545761034d610651565b905061035d565b61035c6101f9565b5b90565b6103686106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561051257600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610466576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001807f43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f81526020017f787920746f20746865207a65726f20616464726573730000000000000000000081525060400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61048f6106a8565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161050d81610748565b61051b565b61051a6101f9565b5b50565b60006105286106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561056a576105636106a8565b9050610573565b6105726101f9565b5b90565b61057e6106a8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610647576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667281526020017f6f6d207468652070726f78792061646d696e000000000000000000000000000081525060400191505060405180910390fd5b61064f610777565b565b6000807f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c36001029050805491505090565b3660008037600080366000845af43d6000803e80600081146106a3573d6000f35b3d6000fd5b6000807f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b6001029050805491505090565b6106e281610779565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60007f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b60010290508181555050565b565b60006107848261084b565b151561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c360010290508181555050565b600080823b9050600081119150509190505600a165627a7a72305820a4a547cfc7202c5acaaae74d428e988bc62ad5024eb0165532d3a8f91db4ed240029',
    },
  };

  export const ARCHIVE_NODE_RESPONSES = {
    '0x890a072349d780f8eabc5dadcb2a1d1bc4a7501381a1a6a81d28bbdbc2c58ed4': {
      eth_getTransactionReceipt: {
        blockHash: '0xb0d68045a3efc0b800c7f25e501b2fd39fb066185179784254d944160000f06a',
        blockNumber: '0xf23ab4',
        contractAddress: '0xffaef3f8a37014b932334d283f90a2408eba0328',
        cumulativeGasUsed: '0x17539c8',
        effectiveGasPrice: '0x1eda299c9',
        from: '0x484f744e6aef1152cffd03177962b23de488c58d',
        gasUsed: '0x28ff41',
        logs: [
          {
            address: '0xffaef3f8a37014b932334d283f90a2408eba0328',
            topics: [
              '0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0',
              '0x0000000000000000000000000000000000000000000000000000000000000000',
              '0x000000000000000000000000484f744e6aef1152cffd03177962b23de488c58d',
            ],
            data: '0x',
            blockNumber: '0xf23ab4',
            transactionHash: '0x890a072349d780f8eabc5dadcb2a1d1bc4a7501381a1a6a81d28bbdbc2c58ed4',
            transactionIndex: '0x12c',
            blockHash: '0xb0d68045a3efc0b800c7f25e501b2fd39fb066185179784254d944160000f06a',
            logIndex: '0x1cc',
            removed: false,
          },
        ],
        logsBloom:
          '0x
        status: '0x1',
        to: null,
        transactionHash: '0x890a072349d780f8eabc5dadcb2a1d1bc4a7501381a1a6a81d28bbdbc2c58ed4',
        transactionIndex: '0x12c',
        type: '0x0',
      },
    },
    '0xf23ab4': {
      eth_getBlockByNumber: {
        baseFeePerGas: '0x1e5ea104f',
        difficulty: '0x0',
        extraData: '0x496c6c756d696e61746520446d6f63726174697a6520447374726962757465',
        gasLimit: '0x1c9c380',
        gasUsed: '0x179d8c3',
        hash: '0xb0d68045a3efc0b800c7f25e501b2fd39fb066185179784254d944160000f06a',
        logsBloom:
          '0xbffc17ef63d3df8b579e7aeaebdb7bef1ef4e81f25368a596fd9f06bffa8351dbeaf573fda8a773f247cbf497bddb79d67fdb51a3bf3fbafd7b71f42e9b76a70f9f2e4b09efef3fcef2bdb7fd7c56deafa45def3d85ec36a9ef3feddda75bef2fece81c33f27853755eab91d47ef795fc21efb76a93e6d72ff8cf0d5be7fcaed2f9d77178fe3b9dc57fd0fc7396377ffd7cc9d89fbee971f2ead9bee039376f5dfe727ef6cade7fea7dfddf4ef729ce2ce75ce457aa3dddbedff5ebe90fe41dcdf5f18c24fbc1eebff569daa467b55d709bf2673b9af065f0a57bdbf4a9ae917f9f3bd3a1a9fc3d6938512ea2b0dbb18c46fd6f6cdcfe8fd786e7c19ef87fb6d',
        miner: '0xdafea492d9c6733ae3d56b7ed1adb60692c98bc5',
        mixHash: '0x13e13bf869666564e6b808be252ff72ac0c3c273e99a784aabc7205eefadde33',
        nonce: '0x0000000000000000',
        number: '0xf23ab4',
        parentHash: '0x285e50dcca608d2d63fb4140081b171bdd3a88bd40afabe0a5b786ce4c426848',
        receiptsRoot: '0xb8f6aa91a77ded26c54aa15ae4da0942bda6c343592a2ca846363f3d90faeae7',
        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
        size: '0x1c863',
        stateRoot: '0x3f64367af237e9a2c9a9d1877ad092d1f50b9de753f70be94fd088e2f7858a99',
        timestamp:
          '0x' +
          new BigNumber(
            Math.floor(new Date(Date.now() - 1000 * 3600 * 24 * 10).getTime() / 1000)
          ).toString(16), // 10 days ago so test runs for new contracts
        totalDifficulty: '0xc70d815d562d3cfa955',
        transactions: [
          '0xb5d25642d55d8c4a4b24bc3d8df0c243e83684b70bac5f46fc413d380a7a66c8',
          '0xd6ccd980dd7a90bb690253bee7c4f253af0f329f4646518861b35e8e3de3862f',
          '0xd8be35be854036673fd165dc7cf18101d4ea216e9545a9538e20e12670c4f309',
          '0xf2e8878fc2f1c74beecf546e845d7daf46ce792767481c7c882bef383479b761',
          '0xe85da534639a02d00d7d76cac60835b7c8ae6763948d6052f8ab0e5dfdd4766b',
          '0x8beedb395f2ebc7faea42ade79119b8d74935488ea139bdb6ce742fde4a77291',
          '0x397de7b143e188ce6395f65cf182f2603ad2c805abdb9f9e94b2c80a9c5059f8',
          '0x1d8a62e4e6a31b7d1560594bc9527f231c207326e794853952c36dc30c5ade97',
          '0x0cd9d85f0ad3b12c6732be218ac5e3f01ddd10439f8ad3e9699cdfffb4967de9',
          '0xfed22e5cfc506d8cd5abb10967d98d9f2a32419e3352d9ba8bf0ebadde003fe0',
          '0x6008b1cd91c3eda9dda86825c4bbb8adf4d68e18291cc1b0c4c7e5417b8ebdd9',
          '0xbee1fd1e9389a59c64fe2a9905b1c999c2239463428de44d39242b0750282224',
          '0x846a768a385c93f1e79a160afc60b0959345b00c7edb43ccfed6bef65268a471',
          '0xd9be77cdd945d96536974309e5b1ccf0ee68200465f459b44a58ad998c33c289',
          '0x5d674b4728a6718f55c992dc5b6ae3d2e03599a3dbfd72cc4b36f0e77a369384',
          '0xac6df92bac51465c59eb36da97f7b6deddd3a1e6c43b6961019d13087ea88187',
          '0xe9f03e33b24770da650b95f019c92aaefbd32c4cee6b336e3ddfe02a4bf80cfc',
          '0xbcdb39b2ee11ca7c69e77184da59a7d48a549dd9d36e0ba7bca22d6e0b8a2197',
          '0x945519a59f415c2671778b880ed7b699d74fd071038e9ae2c58d033f5ac299e4',
          '0xb2c6e7bbb6fc1e54a4cdd5cf95165e53fa9ff40f432e2e5f774a040e5d58085b',
          '0x4e2656cb3df30928fff84dc72b22cf62a1cf86b2f390582f31696ebd64fbc935',
          '0x92821e9e2afc470f8bbff52263b97d2dd678962619f1824003d98103dc4c5017',
          '0x0093f782ecac6055a8c368797b7f9293fedadec0bd678291db878f48aebb34d7',
          '0xce73597a6d70aedbd53810e011ab4d5e88519104519db15b06e66de40003546f',
          '0x241411601b07ff784318a11463047197e344eb1ee44672032c192c9c257adfe6',
          '0x6299bb1d07eb4ada379746accdda52aed66bc288bd4a37ff7b713e215d25f54e',
          '0xfeec2e794ef7f9d18b3a07229c88506d6d2894b40654586ba59150dbdc0ca752',
          '0x64de5d5cb88b0af61df16eadd9773364274f975cf701a71aaeb3fe7131b1364d',
          '0x84c106a5032bd2bf66d04d3536b635ea35adb1e41c04b031d75b88e4a1d9f002',
          '0x6ace3fd276b829ca63c0ed9e0262af30ab2030635fee6027b881c44068bff364',
          '0x4e27f2daab91f60482b52b2eedd0129d06e92247212d0d773ef00cc4883390e5',
          '0xa5371678bfe550e160ae7d6ad4ed25625f27d8cad59bdd8dc2785c190a5f2804',
          '0x999d9a42dbe98e7860469636a709c2df918891a88488ecdcd54c7fd1000c005f',
          '0x77fe5be58eae953e9b6370f895afc9ae6b01cb0dded94c70ad0a97ea1a123275',
          '0xd5176cf2f9be01b6cc7e164dab57cd0b64f2d7d63c956064a34ac5134ece5352',
          '0x2e86c75a18a846e97b7a96d35b1644e1e82bd536e13841a2f54cabdb36a28651',
          '0xfbec065f8e8414884aa7d0b3ea8080e9a405a6d6edf9364389ce0c513c54c0f7',
          '0x7b5c0fd2befce31a235bf24f603b750be462f82e9ea2a59f7f5ca831177216dc',
          '0xb441d31c75c554bd39528ff09ddbfd60c998207106c6a4533dccb72722bbfe61',
          '0x2b6fd971ff5aba6278684b4b5435de1d4153328ff36965c5a0eeb5fd92598656',
          '0x81527792a076da3dac85a84cb65edccb481599c7061ed4440f1996182865b4a8',
          '0xd9833851027c64b7f7f9aab9f12b63f46cee3d86c5926f05748a78a9e0c8e8ab',
          '0x341500329212d186f607e43c5e56e6b4ba923b191a42db8b26bdcc8d4a874442',
          '0x9d19a62df0f423d41dcea1ca64ec3924e58a906a62455a4eb9386cb312f9c57a',
          '0x8568e589afc6e2cf634bae2b6890961109840e033b921f7974f832108dc2ea45',
          '0x5ff69c0eb418777d64f986c00d1859839e3e6ad0ef5aff97f4c1ec6558c2963a',
          '0x80c166e28309209cdd3ce888566efb07af51aa80bb6d338eed4fe3384bacc995',
          '0x0cf418f273a95d9ce79049b8c03b8103825d47c45dc4c4b5b94c22ba1df9d83f',
          '0xb5fd30a8310802a3b713ab865616061e4b70b47b424afec64e325414c7988199',
          '0x6d884572fb87c3517360756f8bccf177eae1f3812f72034fcc081dd375033f6a',
          '0xb1df84a8d1902bd08439095920078946a86accea6f71232b5edd9a4526a3be6d',
          '0xf341451273f2fd88ad46e0672d0dfbbd02160b8a7c81107c475c11b0338fb6c8',
          '0x2aeacda37b5f1a347bb793213e0c4953ecfefebe5302a6e1c2091418dcd89ea4',
          '0x03b5cfd621ec221cdbd7200c9cccba5d816fc6333e7cd41ca05b6ba74ead31d7',
          '0x9acd6bf5cacaaa54c6dd1679316e870dcf4a9c89ab1acbd8ddf1fefb46eba593',
          '0xd76135bf88fb0ca3c69e23008da1a9482562d8dadbf642489ea5cd7aac701d3c',
          '0xb68724280bf75e5545da7865d4cb3627a2674768d53df4f5927b70c5873f2227',
          '0xcc1bcb393f898169ca6f95e20cb621b4d3aee1cfbe5e06067f24669ed9033826',
          '0x2cd0b190a654d6025e6bd678ce04b27b1429d0c6f43aded92841beca04138a10',
          '0xafd9edc46b7d39a060a433d35956775498eaa83c77b6ca17de2bb6824e089319',
          '0xb2ab6a4428d17418f88ea97457c0d55c063997aafec3f6f9e1f679c13acf27f4',
          '0xdca6d369629ade4172b6b18cd4c69ee5bbfdb33dadd5939761d5b39d5aba0ace',
          '0x15ca53f743b3e7afd0858e6870cb387eadc65e2511aecd7baba36add658f664f',
          '0x6758e231d0b78f36561e87522e9cb7741bc5e4b8b1628c7f883f903e003ef4bc',
          '0xda6a81667c043a69ceef5d9f5591c258f5910b8ee637f496675e7df4f184fec5',
          '0x8918a919ca7d8a1b4515ee6f029ad7110bf4ed61fd56471b468d8fecac5cfae9',
          '0x6934620145aabd4266e2e7d2787a113108d62ba4dc8da960903b57ee591de1de',
          '0x9632b5a6adec630f37a114111e908f227f7ed60e419e139426afd968aefe7c2a',
          '0x345187e1ff1274d7a3021d4f2ee71eb0911128f81d5ce92166fa2be42aeeb0a1',
          '0x9076d579a884706587bf260f87e349f1c4c23af62ae33e7f64f11ef7b51fabd5',
          '0xda981f7547bb13403c204f8be7f05728cb977634a75767e83183d89cac0cfde3',
          '0x8d76589331180bc79dc1bf6ecb8054a70467956fef9fa3c5ca0047a4635c5f2a',
          '0x04ee3d4c59a44a85be04cd2629797a959bfb49a0fe6b93744cfcc94a3cf0760f',
          '0x2f857bdc3c6420919ccd9c1348a4334417ca3938bb1fabb608bce8d2775278f1',
          '0x18a3f914c5a0d755d35e6909e2540dfc8e6b89b2a22780d6ff523afd37328ba5',
          '0xd167452effa5ca02a0b5630cb07f5b1a10a16b29221461137c760a972418d859',
          '0x6ff410b985c9b716a8772614bc4063cfe26b250a2ec60e9e1f62483649c59ccf',
          '0x8f85de0fba97c416bb29d47d25cc0b2c7489781c74bd51204d6562f67324461c',
          '0x5dfb39a926cea5f9c83ad1906926e0dcb7baceaf6562f8c491a91232265505e3',
          '0xd2ccba7ee06dba57c6f2340282e351906396aba60f7e716bdc3dedf022d5a802',
          '0x49f6111c9a15e71de1faba6ddfd6f021ed629b3afa166ab6b315aa169da417a7',
          '0xa254c82ea563b4e56f0fbaa0be89be681acd4ae9ce6d044d1d2e7cd59053ae15',
          '0xf8ded5067c194d9ca8116c6e4c90931097255d15db7612b2a50576306cd21450',
          '0xbcdeaaf9eb3c84ee51a9b89089820a03a1aaa37b04c493f6f665f6b280040c27',
          '0x13573d126d82313bc8d299a8ea91d5168adad353dbd6723bb9cbe937638a96d4',
          '0x2236e712bca8839a6ab5447710acee28903a4542a2731b74948e9d339f812f18',
          '0xcf8dc03dde76e9e15567b34e9b211d93b15d8ac1a59c0127fb439728f875f875',
          '0x31da6e2f6536b3ba44b7eda24eb97fe03906afaf1c492a1a2512bdc3eb9bcff7',
          '0x3d65dd787b504929c80434aeac116e675bb338797b36a8a1edf58d24975640d0',
          '0xdeebbf52d6e60d29f7c76b42f7d03af041bb00da304c665fab17c63a814d35f7',
          '0x314f801bdfdeb85274d9f0569be2561deacd52bf37e3e72b70857fe334ff938a',
          '0xbda7b3dd5f7c3a050b844473fa0bc079dc8c09f0fac4dd7c1759025602d0e6f1',
          '0xd8245d860f6f502b822ab2add99d719d16393382deda2be186f3610304c0766c',
          '0x3870c6adb54e9a4e9c52bda123301740b4ace0864661ad0eb20303ff70ca6096',
          '0x1e9ff6e6a7c3a37718b452b27e1d2cdba2b4343a9d3541cdde4cb261d85de5c2',
          '0xc1f6296e244791d08b32177a47b546a741b9dc962cf9a8fd8761e4e674176ea9',
          '0x2c78425e01f3ef3e5282c88fc9d38d530613f84a955fe5a52a3456980c2e3b43',
          '0xf60a116a72213237eb5b9804731bed3ca738204c38378454e8d60bb56ded191f',
          '0x0b41c0e12bffceb738bd595597e301781aa97dbd93a987a52b470895c6be5782',
          '0xf6e7cde1b581259d809d8ce33aad4d5ccb09e45338f240f97cd6f906ff84062f',
          '0x6af9c7340343f63224c8d4470b166ae4b3077c9aad3cfd0a91bc04a9082f9a20',
          '0xd15c5f6b88c0336443780fdfcfe5c701233fb4aac4ae50b5cd30fd379b47e6de',
          '0xb6fbab07e05eb1793eab55c18ba61cd380186dc6ce41e5a4fd5fc7979f9780cd',
          '0x5a7df20b50dea15aa42bb185730675bc16c78000fe66bd0ba5f9813e2f51d2dc',
          '0x2ce85568645947e3c9862a04de06c3589bc1ed59dcce721f167b686e962cfba8',
          '0xfdddf9441692d0afeab85d80ae2de412ce55458bc4cc122d1db8759c2111f84b',
          '0x7f893b1e2d8f3edad975862cc05744c0974f787babccc1a0c891338e22a6c208',
          '0x2e87703487bfc0c26ed4ab9e8582bc2b10e9b4b610684dbbe9358dd0c1acce61',
          '0x2d65e10901005cf8d676883acf7c89fffb242380103d17d83c56ce4e5328c134',
          '0x7640da563d00771b8e74a1e9e0606aa3e5c4bd09fcbc93e146af86397c1824b7',
          '0x4067fe2e37d8fd782eb692ffddadafd107da425a7ecaf7c0802efe7075c0d037',
          '0x2112badec8c66050a6e58f10f0afef5e0cd11061a0fb2e6d0d0a6d841ab81255',
          '0x53072cb7027d62967889fe5cb730a805cb87fb255093598d69d7c89dec69f509',
          '0xa363ea242839121f61a79047ba2e10e3286c42625b4652dc20867268a02ed59d',
          '0x3dc9ed6f14ad660d6a45c432a20dd97ec5117529ac3c2c6fcf2a5aa81d544e7d',
          '0xa68176739adb59f46f35107496dbe7bbd962381734b7331b269eb0ae01576ea8',
          '0x4fdaa20fb5c1f66fd93d6ed5e41d0523d305875b245b56a1a53c446738d29664',
          '0x157657b55ae9cda2e72615b754dfe503f02446eb44742213e6f4aebfeca92365',
          '0x39a8f2a9d54695c63a7816781a4c806f527a50ebb872303b34e2e4044394af6f',
          '0x1429172f7e40adcb190811ca14d5d8b8a6986c62405358ee3544bff2fad35774',
          '0x56aea10b51de29a6e55b429c21eea48aa8488f6a95d5a81c420d8ea8f92a3510',
          '0x10da21a04c15f500ab123eda8a3696948d67c270fa303e8190775244946f66a3',
          '0x4b75e550d0a82b4f732737e121efac413e8ce1f83ab7863db88ca2cdd6e93e74',
          '0x59ff50e7edd87a1b186f6c9f3eeac4a143265d8ac9351069076dbe6e084dbbf9',
          '0x8abc84fc16d3d69a53943b1dd28e20e2ca98cf48d9ff327e371852af8110a126',
          '0x08f9aaa724e4823bc560c297065bdebf8c539353c24783af54f9b91d0635a469',
          '0x42678fd15990bebdb832df5acede88f7c6bbeb9bdd5c8cc42ff6bce03c263c73',
          '0x180998b405ed8d6d9acdf6a489b5c7054aa00ba689f8afa3d997e4f8aebc1aa4',
          '0x2a10f738f318523c9ae67df7592db7570176be0224ac6ac7bd999686967d31fd',
          '0xfe0aec5de1b0755117883758053887706b238c5ea2acd37cf3630bc868930af4',
          '0x636fccfbcc3db609376a00f94e53dcc24580d0296428e3239d474fbcb2f50e8f',
          '0x23d4ebea42d0912014659657cb790c7a02c43668ad206a387b4d409c27ab0d4d',
          '0x93dd60c3120253a02daecd1f8a7513cd1d521f68c300f9cea45073332c8a00e1',
          '0xa5fbc73b78e68092c92a1d6a77f33a88900fa5c5bbf8d1b2d57a44470ca5b01f',
          '0x080e67d4ac33342f1087357dd1f3b251ff82fec2ac6d294e4d6242e0e5dde54b',
          '0x6f0db360c64454086f0fe2ea898ed08fb78e44cca1effbf25a66637633faa159',
          '0xe3b553c66bc00f87198956b8c9d76f12e1d7535d482ddd59b72fd13eff73e113',
          '0xcc847c399c21a9d1398e229e97aef1bb6c73f7a139d16e36a7a777babf1d0522',
          '0xe91ae61cd5aa2ce549eff8ce31d9e9a0871f72a81630f0e40b12dd7df355aaa7',
          '0x220346471ebfe64284726673eefd1af40e6a1c4c67ffdc1a5978aa9e94306ed8',
          '0xac2c3ea6c79677694a7280570325f9bee5e238fec431efd0a83a3ad0457fc7c2',
          '0x0bce92f2a7455b5bbdec6f67bf255e07dbe7fc26e24afd979b875d48d7177e2f',
          '0x327c615237a5b97b17f3b66b54bfa3c4d2b4186bda7ee35d1e76e1940dd426d7',
          '0x5dbe392cc020ff5d5d051e311a93c08d7bde162ba7ddb01819dcc111c7f5d18c',
          '0x9b32dbaa9e71caaba327f0894d06b1d140c7f4e9cf22cc9b39fbede4e254d17d',
          '0x25095529c7ef62518684a524c597a85a122e8ee6dacb92d0e09e8a6c1e012d39',
          '0x9dfc1fced3b2705c93ec9399ba553e75da9f9ca90d5b1d10f01c715c026a53a4',
          '0x159db5d735e8e3104dda882afd268279c0c0f5f31ef3b408955dd1609efb05ab',
          '0xe5ca034e55fa6cddd8e58c4b121657202f6224a35d51bc8337bf6112aa552401',
          '0x1686c8c40fba28154c6effb9e913c24bb061c37d40fc51a285823170954602bf',
          '0x5ed1a604fa06ffa21abfeef03f11319d5bdd1bae8404dc25b47c8ff516ef5458',
          '0x2870fe6b7befcc1251bf745a85dd8de57bc7e85e4b12c17bd794a414a1d5d78d',
          '0xc41991a7d1614715058a942471b2ab8c17a76ee1c9c9eb028f5dc6389725cd3d',
          '0xcc0d65e56947769b1ceb28e997b7efb3e5fd8be62a549a2161fc1c2f280ec376',
          '0xee2cb3a5e00abc690a0e7a123f19a848148f6b3829fd2068635d06e5ddaed28b',
          '0x2f5958e481b8a25af6bd2c2f0b577c701b2ba1ebafa98d11e45cded1d07a954c',
          '0xf2bda828c337ff9c4d75bba62f916638a98c21753d60c367522e40f790d70bac',
          '0x29ced989282b188419f4e77573d29f9c310912b80b769fa563885511ffc98f6e',
          '0x79e877692e6e06be5310ce4bb29306845a24a13682c807095cd070a513c514e5',
          '0xfbe9ab5d2ca1195e65eccc2c1ebe586d7e69316a18eb1d11565334f98033be0e',
          '0x596c50b1a31b9aba11247d5f04cca9c8e2f542ef04b91d57d7de4a538c28c293',
          '0x7e557378873506dc7dd39eb339db19bd8013d927885d2fbe034fce0facc5557b',
          '0x62dc03a00cee13c686e8dfebb310de384d5b024794fb68b17d934191fab67168',
          '0x3c498bc76ac3744b5abf3cec0b79d634f33453d1f7768670415874facea47ca6',
          '0xb37898729ca14c05232f44927d180bbd95352f2b829ea82a6e47a33ea7995ddd',
          '0xc35da61207fc233df2720b18ec4f5df929ce8dc51dd250dcad3404a92d4eecca',
          '0x6fb252cc32e0f41302236e590b622cf94ea76318977740cf40be33a16656d831',
          '0x3da026cb38194acab9ed8741b7494b63f59e0a6b7978c3762dd97ea48c405116',
          '0x0a119e93b69919742d2c517cc85990c3abb87fd0921c0901f5ff206828156307',
          '0xc7daa621e6fce2927e008b718c579ffab78733631acdeeef28ac547db6226383',
          '0x21a6c3731acb2161dbfc3b1aea8eb448708a92883051b0e20111c31f384e5c21',
          '0x847d369b43fa4919f98094247e687b12b04cd10a0a5a125d5c66f67087ea002e',
          '0xc4a8defe46299183492346ae81646aab44fcbc28dd9fafc6c93a8b31afd16fa7',
          '0x00526c690cdfa546676daa5a1e27d485405eeb2372f226fdf8b70f61ce3887c6',
          '0x47f21b6a952ebae3ccb729abbef605b57ea5bdd78868d7c152e32f5686a8ffe2',
          '0x21e64965d431d690569f5052815c54bd2f21a1028e0036bcafdb0f93d8913573',
          '0x72163c937387b90300450b7d3066164b0c607690053d30eb3d81116e1a67abaa',
          '0x06ae92a26a287c3552cfd93411c525709467538dad128844ccc71b71b733b377',
          '0x06ae41b0eaf8b89052b08583b0cc01cb76f522e2d88c2ede4af9b06751be79e3',
          '0x9e536e1875a0c55bf679a6b95789b888d4b5b59028950fd3d1febf24338003f2',
          '0x28fa1408dbaa76a50ceaa86713f3feba1a7c3ae1c1e0d63fde3b60c077256beb',
          '0x04936b49c0efbd5a36f77492a250338b0e1b7b9abe6d45aafb29f138430c55a0',
          '0x660742baec958a28de2f44bc9e5b0fb6c262d05850e7264d457be09a898b245e',
          '0x556010c3d0f79dcff7125cbec98ba72ad82edfefbe33c33a2153498cc9a9f5f1',
          '0x254442879bf7ca4981ce911b76ce206c8d83a8b237ab5b7be5d1d76b21fe6d21',
          '0xf48a7b5b6e8dd09cb5bd512e3b8bdfc18f41d90d1352d3168d83062a7af79123',
          '0x3d88a7ffa9f1101f967decc7293428a58b753ab922b7fa5354092cc1254b6b34',
          '0xe5b1d10daab9b0d6dc9ccef633cc5eff1f3079e87e6904279f95df094a9b43d3',
          '0x52b5bc75b303699dc19e7e9eb6330d6b840f488d5c4f4439c30f9fe4de6f5fed',
          '0x364b5b8f3d05f66ecadaf1232b3df8091face5eb376964cbb5bbe1650019e73d',
          '0x8f575f882fb1715c0e4c7ddd12595464a98fbf7ac530560757616661a360408d',
          '0xcacbce121150bdeb600cedbc18f6bd3bd8c995d7f946d04946840c723b710af4',
          '0x43f519b012f317beb2ca21cd2acbbf7f9008cac1849695ff22bfcfa94a5638c8',
          '0xbf1ec55e22f328c44a79a903de8420f63a2b829772072a1ca0286890bbf2c83f',
          '0xc09d2e8372e441058cf30a41348b32d4aa4cebd7b80da48d0d979cb2d62522b7',
          '0xe81680254416b2caf874a2ff6f17ca0e29ef1e58109ef4495334e9dfc8c14968',
          '0xabd9e17678ea8c7d00207702576d70d117c08bd919b19b5abf0994af10ccefcf',
          '0x1410770f18bedb6a86fb1fc202390c61a52d4d914cf66224be5d78708cfe1c0f',
          '0x0a8ec3596845395b4ebeb45913f11dd7f30be3fae0bcb63696c6ef4d2d6fa48e',
          '0x94a02115e320dc787098bb300917f86d4e0ec09de54572284f7a5d54b3e52188',
          '0xac47168e844329d88c9a6cea4336ecd3438dbd9ae3f587440b44ab0bcf18cf15',
          '0x53cc0e1553ef4ffca586c56fccbed2dc78bb68af0ac6f6602f63de3546d6588b',
          '0x05ef1fed08a668b3f527202270039fe97414bae7da09c9492280437ba12345ff',
          '0x4621903439b27e11d2a446c2b5a129044099ce8e121ad7bb9074ca2750242811',
          '0x72e9371a1cfa12ccf2928d694f528e7b6052f4cc6e4cceee07bef2e50ef959f1',
          '0xfdd47875e78ff57d55e0b0b371517d4c8094eebadb52efb49e09272a70c33127',
          '0x35160884754c718700666ca0000dc7561a0d84b577dd53817664a9c4e13bbe9f',
          '0x9e41ca4907ef3aaaf9b690103ee92d8b7b076d823a67dd66440440c0baf2816c',
          '0x6628d97aca1774d2df1cfdc3bff2311453f5dade51ba7ce462e183755141a31a',
          '0xce41880d3d101d5d113b28e48257b036480502b27ae7f7f422643398a2595f91',
          '0x5df3791123a5fa4274edc736e2f6567cb8b3a9d1d74cd5f5f6301a544cceef58',
          '0x11b035354e870e99aebd6e535b27d17600ec688b4afadd5e1ae7ccd6cc384583',
          '0x7d6f698f2fbe29383d1f3f67284b93debfeb7c3508d2d3c8590265f55cd0b106',
          '0x24d8ab7bb7ac7f366d82849079255286271069cb9eee9e6be7f39aa40394a381',
          '0xbbd8bc11c9408a9a8f76fd624705fae90cd2963cd95ef988ca889bba39677ae4',
          '0x334d40d96eb505cec72d17c91229bc8baf01158ebd1ba73a409ed8cc4c7e49bb',
          '0x33d939f159719e6e640d3359634c69a5edf25e1357f51e5ed81102aa6291361d',
          '0xf6139652cabe5271fba1851f3420c9098ed41661eb3e14f028bb9f1ea10e7d59',
          '0x581e0907f9f516fd1be89a0ce8a4637a39d4e1a899a3904a6f129c871ccf4bda',
          '0xae0ddaa2bae376c821542e9e3b001e7d6546c986da3291887e0d2c01dc83866f',
          '0xca4142518ce52accc0009ebd3a014295ad09274e5ffdadedb5adf330fcc26fa6',
          '0xdf163be5fe92e205647942c61fb2fa7e48c5d2d9656fc07b260cd8455bcaa60c',
          '0xe370465228ba4fbaf61cc7405b5d433f6036aabe2bf1ab9a1727fd5f4381b62c',
          '0xf5727446d25ec4fa5ada408d8a7002de217a9f1312c2075833c45b00cab8a185',
          '0x7f8b13e1afe75a33b656767fbbca68cd0c0c2b281f20d9553c66bbe2d250bb9b',
          '0xf0e69f66588f9a9bbb1ae67f8289cabd4a13a84ca5bddf99f02e0cd0b06383d4',
          '0x9ad31cea9602e68455a7ce5742d2e3fa8f8e8726b734f962a3ef89160b7f7716',
          '0x1143891deccc6f9ffbb4a9fb1be122cb2e73b560e0bf5615152b49b1b5c71b92',
          '0x72ebf674998a07bd03ad3b53cd074ac044010328eef829d50f8b5b96af9f49fa',
          '0x28a1e956121b9dace2bff3c33bf61695cab5dde7903931d0ce82983d9376bf2d',
          '0x3487182d841ceb6e8331de148a4a9fa9dc9750f6e730d647e6ab53661d468531',
          '0x668817e6f362116df79769f20ff478a364475ce02961f1d042e9e28745411f0d',
          '0x4bfb4efd5c0289a6c9bee322a2e78af2b47fb6a21aa8e0c8fdf0726a90c9d967',
          '0xa761cfa07ce756f87bdcc7a3262853ee9d8db249dd46461de061709f7176a375',
          '0x0bdb885a5d0d74208e1793b1753b1241262ed49191c4b3da4a0f47f9d8ec445d',
          '0x3385d4dd6718d34036644f783b3b06b0b80d383133ec186c7cfafe1796a86198',
          '0x12601cd3763c742d4c0083e05faf967d5b8649e65801787d926c1301583c1433',
          '0xa3fa1b06d927aced358de02feeef36db891d9191076a85dcbf1433a77c4a6092',
          '0x764d7fe69420060d010652cdea6a1b7dfa70d4e0fa30469bea273c426b4c84aa',
          '0x915da6d5873ed05173d0f9b43302a697cca952f5d3652400c084f80d6a223118',
          '0x966fed7e4a76b0a3e88a09a48a5aa91b7f2db964ff187281a07da1e3399c431b',
          '0xeadb8b2327fbe34faa52c777a15d8dd2970292525730289b586e0bf5dd060968',
          '0xdaf37e026fa3bd2fabac2e3e986441962b962f8c884d4e0989917e74f6888ad7',
          '0x967f3f6e9e5db0c58157bc4a2884f11bf83711a72f466ad6d5771ef0bd18994a',
          '0x134d179b962add808ca1b50da45a9741093b4f115a6c974823998f5ce358127e',
          '0xb84c1a3a0481031e64b6389e39b6a7a5a1fa0817b45770083ff875a1c2700e05',
          '0xde735851d307925f026de00bc33caa45fd2d6cfd12253ad86259aba68a4f2cf1',
          '0xf9c89ebc41f0d424a68751fbd57020d08a8146ff458d5f891aa6cb0d35c0c58b',
          '0x54a2a5978cb3a2e5e158d59a1b34656108a1645f32af033f8683728ecd6e01af',
          '0x4f91028a212b45b3bcfbe265d88590eaddd62d7e3af24d38199ae95af1c28721',
          '0x15d54ce3c4f85ced5824c721258f189d4454c5f530294294b55bdf229d331752',
          '0xc2e68987f71eebe2e0dc8a6362a18c9fe389cbd7c8e4f19a7213e5ba7d86bd23',
          '0x435028693880281dbb2d4fbd76d4f24da9b124d5eba7a9a2cfb8df03e77105cf',
          '0x312167d94e1f09af65d2c992f1f06a158d1cabaa964ff5b68a79d0fae6552ff9',
          '0x325d61cff0dbf256b68075a010a1fe10c7f8b79f08750b20e8ca4a6068989583',
          '0xbe70f8637501e197237ab5ea98ecaf7c3b97fc7e17dcecede26971992105f1c6',
          '0xa2a066d27c361fa742904ee59664bbbad84c88a281f34df9ac983776f824f5e8',
          '0xcac72a5031fd41a5b56e6e23abf03dd2255f303227e57eb6247f020027949314',
          '0xe472293e777f928e2824cf5df84adf02c8b9a7deef8ab8625c47bcb1a95146f0',
          '0xc08a3b7a454fbc22bb0724240496ad45685c67a936379e3872d10512414ccf4d',
          '0xe6d946f1b280f4567e3bdc0f331bd7fcca4f6d9d0edee46f5207429af7550f14',
          '0x32cb77c517507afaf019374b195d6d2bfaa8226c55fe1351816073af4afb6275',
          '0xa1d69f0a05ec21cec13f67d569b79edda8ea4bce3c44ad0fa8dfba2e92aed81b',
          '0xa55e40c7e06ad973098b984147fe5947f8d4e13329fdcf00697ff258433eb941',
          '0x09470d07a4e323c89dcd2b6e406f38073811fd1a27f48e439d0844fb38dd5481',
          '0x13afbbf32f194cc8047d7dd2a5e01b10ed0612eac6d9b20212fa411c6207732b',
          '0xbeee23cc44b71a6e90956931298690107bdd970542e69d13e866646199506ab6',
          '0x5fa89ebbeae2d25f97731f1557537a66a62dfb54b66e31fc84c7c848cfc2a8d9',
          '0xd2e0d74c30a1f38b724143a5367df7a36af12d3aa241163e6a0ac594f546a39e',
          '0x435c0c68354a7910f903955a8587c3e01e12a4edc68043b8ecf6b29e1659ae9c',
          '0x826770a734aa535001b41154da037d5f178163e64013088dca6152253c14ae71',
          '0xc2266c9a6c2c6faf24f9045fe17af55a67d7586a69a7001a5331cc805bfd66ee',
          '0x37b6085a6e24201b495fb75ec378952965b42716ceb35f83c9732678a2fc2d8b',
          '0xd6cd24c2bf5365bb65eb3043f1c019abc7e29b5863968c392a9fb850a70a523b',
          '0xfe588a922d633e21c172bcbdb8e66e57c82ea2f270f5116e867a0462adff3988',
          '0x7c0833e818c303d85a3f059967c4ddffb4fc7f9a872f0cfa1715f5a587279c8e',
          '0x074593520db6e2dc7f83d4d45d039a340867a6826a102b5280a5713f250cbb4e',
          '0xd86fdfc4a4a29b07f0a8de2ecb2b828ca06184c80835292cbd25654b56ec14c6',
          '0x7bdd10620b6ee8eddc744c615533094427a3168b5f1c39eec16df42114ebd657',
          '0xe6a607747d715b4c77c49891008ac52609d51d2468e84470cb443548a98a3bbb',
          '0xe8ba87e889e441b9eae49038fffd9bb143348db6167ef95af5d244a75e807b53',
          '0x2b60995391c0f4bd6f6212709c71feb7e0d6c4e22549d1133e9dd76d207831ad',
          '0x3c0c40d13830218acf28255505ea7df2e6075591220dab5aa6d9ca605df86d35',
          '0x44cc58da0b2a904623602b1a409904644f4007718de45a116a92690e1ed8704e',
          '0x324db26d59d82dd4611ec9c8e6af8b381b6f6b2cc2729771edf47a81c53addab',
          '0x961b6f3a2c990470e2d54f21cf2bba66cd104d5ab3a1cf7a7f01aede6e770a62',
          '0xee2f88afa15a7b463457c3aeefa8b38c63e498cad5916f8526814bfd350a93dc',
          '0x609accaf6feec36ea197fa6502a54a3aa6b1a915ae3a822c939d9d967c71136a',
          '0x95445d20b2b8d4ea2d088782f7788e6ae1ee6811a6c9b7bb5b4719dcfae4fdde',
          '0x985fb0b1b018672093ca18bc9ea42c537d5ee924cb4091b707c4085ac35ae1c6',
          '0x669dd50a72e814d81e420eb297094de85e1602d1ba615d61c17c72b6e451f323',
          '0xdaa2866ec3ff651e23fe11c99ab9f83db8bde53c3694c67dd6944d5984896821',
          '0x2186e9b10ca971ffafe3acb6136d0102de25d87a7fd663f020b9d791cc6565a9',
          '0x94de83564d35f0dcc193fd4a95b0f5ea7ddf7738048c4634485facad9873c726',
          '0x7ae78137a58f5e676c3cdb422f25c915738bfa4d9a93f02c76ac6e510ef404bf',
          '0x22a36c82aa264296a41d3b4e72b53f4029f418d7f8cc6a9a6c84f1fd7b094952',
          '0xb7dce4c3dc72cced4808794420e40fc970aa7d1358a19ba9f788787998aa8489',
          '0x1b3ec57ac2fba0adf6a17011d54d6527c66790043a4ab10c720cb59a2e5f26f1',
          '0x3538e5a9a475389846a8860ad5b9e01dd764772831138c144b83be3690de4662',
          '0x2a7c72d5647b9b0e864028282ca2e610258c583f9c7e856ca898da2edfffffc5',
          '0x890a072349d780f8eabc5dadcb2a1d1bc4a7501381a1a6a81d28bbdbc2c58ed4',
          '0xb1ec13f0592261956ff80f610e5848f17a0b2854accd0aa1a754dd6a319c73cd',
          '0xaf910ba2f0570c889255cda315df8fbe7ac5a09ee01fc76ccd1b9730de7ef075',
          '0xad76350282fdc3aa2a4767482ff0102c0cf9358e2c5816646e01ff1148cf5dba',
          '0x75efe31c33706b8d82a83b9ce46681b641687664df19ff8172f19814ccc2c289',
          '0xe7bc607defa5f9ed1428d84ac715d2352ff1172aa01ceb1589296cbd6efe7aca',
        ],
        transactionsRoot: '0xb81c6d96c6878a38f46d5bea2f0a32354f036e8b845c143c723a69b476f5a049',
        uncles: [],
      },
    },
  };

  export const EOA_INTERACTION_MOCK = {
    status: 'SUCCESS',
    failure_text: '',
    balances: [
      {
        before: {
          value: '184.315712093117247736',
          token: 'ETH',
        },
        after: {
          value: '183.314926693117247736',
          token: 'ETH',
        },
      },
    ],
  };

  export const ERC20_TRANSFER_MOCK = {
    status: 'SUCCESS',
    failure_text: '',
    balances: [
      {
        before: {
          value: '34.039260923474019579',
          token: 'ETH',
        },
        after: {
          value: '34.038262849156009929',
          token: 'ETH',
        },
      },
      {
        before: {
          value: '231481.998602',
          token: 'USDC',
        },
        after: {
          value: '231473.885324',
          token: 'USDC',
        },
      },
    ],
  };

  export const ERC721_TRANSFER_MOCK = {
    status: 'SUCCESS',
    failure_text: '',
    balances: [
      {
        before: {
          value: '1.22123535300771735',
          token: 'ETH',
        },
        after: {
          value: '1.220825102030542628',
          token: 'ETH',
        },
      },
      {
        before: {
          value: '101967011281167415586822840679716656545853762169628799094421308749132189683256',
          token: 'ENS',
        },
        after: {
          value: '0',
          token: 'ENS',
        },
      },
    ],
  };

  export const ERC1155_TRANSFER_MOCK = {
    status: 'SUCCESS',
    failure_text: '',
    balances: [
      {
        before: {
          value: '0.309938730348290881',
          token: 'ETH',
        },
        after: {
          value: '0.309507766579009861',
          token: 'ETH',
        },
      },
      {
        before: {
          value: '132369840732245062287252722290957834256384',
          token: '',
        },
        after: {
          value: '0',
          token: '',
        },
      },
    ],
  };
}
